// Code generated by go-bindata.
// sources:
// data/.new.html.swp
// data/.new_password.html.swp
// data/login.html
// data/new.html
// data/new_password.html
// data/passwords.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataNewHtmlSwp = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\xd9\x31\x6f\xf3\x44\x18\x07\xf0\x7f\x19\x89\x5d\xbf\x02\x3e\xc0\xd5\x0c\x30\xd0\xb8\x6f\x29\x45\xca\xeb\x44\x7a\xa1\x14\x21\x95\x36\x4d\x5b\x14\xa6\xea\x62\x5f\x93\x53\xcf\x3e\xd7\x77\x21\x0d\x51\xe8\x17\x61\x61\x63\x62\x67\x60\x65\x60\x61\x42\x48\x0c\x6c\x0c\x6c\x30\xc1\x88\x6c\x27\x25\x2d\x45\x0d\x42\xa2\xe2\xd5\xf3\x1b\xea\xbb\xde\x93\xe7\x79\x7c\x67\x0f\x51\x7a\x1b\x1f\xbc\xf7\x3e\x7b\xb3\xbe\x05\x00\x8f\x80\xef\x57\x76\xbb\x1f\x3f\xda\xc7\x49\x0d\x88\xb9\x12\x58\x42\x2c\x7a\x92\xa7\xf7\xc7\x7d\x52\x24\x0c\x94\x8e\xb8\x0a\xfa\x3a\x30\x79\x14\x9c\x8b\xb1\xb1\x3a\x17\x41\xcc\x2d\x0f\x52\x31\xaa\x0f\x6c\xa2\x96\x29\x4a\x08\xf9\x87\x5c\xbc\xbe\xf9\x78\xa3\x18\xbd\xec\xaf\xb1\x17\x5f\x38\x79\xe8\x86\x08\x21\x84\x10\x42\x08\x21\xff\x21\x9b\xad\xe0\x0a\xc0\x73\xb3\xf9\xda\xec\xba\x72\xeb\x4a\x08\x21\x84\x10\x42\x08\x21\x84\x90\xff\x2f\x1e\x03\xdd\x1a\xf0\x7b\xad\xfa\xfd\x7f\xfe\xfd\xff\x17\x0f\xf8\xd9\x03\xbe\xf5\x80\xaf\x3d\xe0\x0b\x0f\xf8\xdc\x03\x3e\xf5\x80\x2b\x0f\x38\xf7\x80\x8e\x07\xec\x79\xc0\x53\x0f\xa8\x79\xc0\x57\xab\x40\xba\x0a\xbc\xba\x0a\xfc\xe8\x02\xdf\xb9\xc0\x37\x2e\xf0\x99\x0b\x68\x17\x88\x5c\xa0\xeb\x02\xaf\xb8\xc0\xaf\x0e\xf0\x93\x03\xfc\xe0\x00\x5f\x3a\x40\xd7\x01\x5e\x72\x80\xe7\x1d\x00\x4e\xd5\xcf\x6f\xb5\x07\xde\x1c\x42\x08\x21\x84\x10\x42\x9e\x11\x61\x30\xb0\x89\x6a\x81\xb1\x30\x38\xd3\x79\x52\x8c\x8a\xf1\x50\x55\x23\xc6\x42\x25\x5b\xa1\xe2\x3d\xa1\x5a\x61\x30\xbb\xca\x34\x1b\x5a\x66\xc7\x99\x68\xfa\x66\xd8\x4b\xa4\xf5\xd9\x47\x5c\x0d\x45\xd3\x3f\xaa\xa6\x41\x11\x2c\xe7\x39\x18\x0b\x65\xd2\x67\x03\x21\xfb\x03\xdb\xf4\x37\xdf\xd8\xce\x2e\x7d\x36\x92\xb1\x1d\x5c\xcf\x4c\x1e\x35\xfd\x98\x5b\xde\x90\x09\xef\x8b\x20\x4b\xfb\x4f\x7a\xdc\x88\xed\xad\xd7\xd8\x64\x52\xdf\xa9\x1f\x76\x8e\x44\x94\x0b\xfb\xd6\xf6\xd6\x74\xfa\xd7\x02\x55\x6b\x87\x1d\x56\x45\xcd\x7b\x5d\xb8\x8b\xf9\xf0\x56\x63\x0b\xf7\x62\xc5\xa5\xf5\x59\xca\x13\xd1\xf4\x33\x6e\xcc\x48\xe7\xb1\xcf\x72\x71\x31\x94\xb9\x88\x83\xdb\xd5\xd8\x99\xce\x17\x02\x5b\xed\xd9\xa8\xc1\xfe\x75\xf5\xe2\xef\xbd\x95\xcb\xa0\xd6\x3e\x4f\xc4\xdf\x57\x0c\xe7\x27\x79\xa3\xd4\x40\xc6\xb1\x48\xe7\xc5\x26\x93\xfa\xbb\xf5\xa7\x91\x95\x3a\xdd\xd5\x79\x52\x24\x9c\x4e\xaf\x4f\x34\x15\xa3\xd3\xa1\x11\xb9\xcf\x82\x7b\x33\x5d\xe4\xa7\xa6\xdc\xfe\xeb\x4f\xdf\x38\xba\x22\x6b\xd0\x62\x4b\xf5\xd3\xa9\xee\xdd\xec\xe9\xbe\xbc\xab\xad\x33\xae\x8c\x58\x3e\xdd\xbe\x4e\x23\x71\x47\x9a\xb2\xbf\x72\xf1\xcf\xe6\xc2\xe2\x4d\x60\x89\xb0\x03\x1d\x37\xfd\xf6\xc1\xd1\xb1\xcf\x78\xb9\x3d\xb3\x64\xed\x5c\x47\xc2\x98\x22\xdd\x9e\x8e\xa6\x53\xbf\x7a\x81\x8c\x1d\x2b\x51\xed\xd1\x74\x76\x0e\xc5\x99\xae\x73\x25\xfb\x69\x83\xe5\xc5\xd3\xff\x64\xb6\x50\x3e\xfc\x0d\xb6\xf9\x78\x23\xbb\x9c\xff\x2f\x96\x26\x53\x7c\xdc\x60\x32\x55\x32\x15\xeb\x3d\xa5\xa3\xf3\x6a\xb1\x3a\xf5\xc9\x8d\xdc\x4a\x1a\xbb\x5e\xd6\x6c\xb0\x54\xa7\xa2\x8a\x1c\x56\x61\x61\xb9\xb0\xf0\x64\x05\x91\x31\x7e\x0b\x61\xf5\xbe\x87\x6b\x3b\x07\x6f\x1f\x7f\xd8\x7e\x87\x55\xf3\x3f\x02\x00\x00\xff\xff\x33\xce\x8c\x11\x00\x30\x00\x00")

func dataNewHtmlSwpBytes() ([]byte, error) {
	return bindataRead(
		_dataNewHtmlSwp,
		"data/.new.html.swp",
	)
}

func dataNewHtmlSwp() (*asset, error) {
	bytes, err := dataNewHtmlSwpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/.new.html.swp", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1481253413, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataNew_passwordHtmlSwp = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9a\x3d\x6f\x1c\x45\x18\xc7\xff\x81\x26\xf7\x96\x8d\xe0\x0b\x3c\x59\x84\xa8\x6e\xd7\x67\x20\x89\x9c\xbd\x93\x50\x2e\x41\xa0\x60\x9b\xc4\x8e\x48\x15\xcd\xed\xce\xdd\x6d\xbc\xb7\xb3\xec\xcc\xf9\x7c\xac\x36\x48\x11\x05\xa2\xa0\x4a\x49\x01\x35\x88\x0e\x3e\x00\xa2\x42\x42\x48\x08\xd1\xd2\x50\x50\x21\x4a\x24\x1a\x34\xb7\xbb\xf6\xd9\xd8\xd8\x45\x00\x21\xcd\xaf\xb9\x67\x66\x9e\xf7\x79\xb1\xac\xbb\xc1\xca\xdd\xd7\xde\xa0\x2b\xce\x4b\x00\x70\x11\x58\xed\xbc\xfe\xd6\xc7\x17\xd7\xb1\xdd\x00\x02\x16\x71\x9c\x81\x80\x0f\x42\x16\x9f\xae\xf7\x50\x3b\x74\x23\xe1\xb3\xc8\x1d\x09\x57\xa6\xbe\xbb\xc3\xe7\x52\x89\x94\xbb\x01\x53\xcc\x8d\xf9\xec\x7e\xc2\xa4\x9c\x89\x34\x70\xc6\x6a\x12\x9d\x25\xba\xc1\x60\x38\x95\xa9\x1a\xb6\xaf\xb6\xf0\xe2\x6a\x67\x45\x0f\x9f\xb3\x2f\xd1\xb3\xcf\x6c\xff\xd7\x59\x19\x0c\x06\x83\xc1\x60\x30\x18\x0c\x86\x7f\x11\x95\x9c\xc3\xbb\x00\x9e\x2a\xc7\x97\xcb\xcf\x73\x47\x3e\x0d\x06\x83\xc1\x60\x30\x18\x0c\x06\x83\xc1\x60\x30\xfc\x7f\x61\x01\x10\x9f\x07\x06\xb5\xe2\xfb\xff\xea\xff\xff\xdf\x2c\xe0\x47\x0b\xf8\xce\x02\xbe\xb0\x80\xcf\x2c\xe0\xb1\x05\x7c\x68\x01\x8f\x2c\x80\x5b\xc0\x9b\x16\x70\xd5\x02\x56\x2d\xe0\x05\x0b\x38\x6f\x01\xdf\x5f\x00\xde\xbb\x00\x5c\xbe\x00\xfc\xd2\x02\x7e\x6a\x01\x3f\xb4\x80\x4f\x5a\xc0\xed\x16\x70\xb3\x05\x5c\x6b\x01\x7f\x34\x81\x6f\x9a\xc0\xe3\x26\xf0\x7e\x13\xc8\x9b\xc0\x66\x13\xb0\x9a\xc0\xd3\x4d\xe0\xf7\x06\xf0\x6d\x03\x78\xd4\x00\x76\x1b\xc0\x4e\x03\x78\xbe\x01\xfc\x5a\x07\xbe\xaa\x03\x5f\xd6\x81\x4f\xeb\xc0\x3b\x75\xe0\x5e\x1d\xb8\x52\x07\x7e\xae\x01\x5f\xd7\x80\xcf\x6b\xc0\x47\x35\xe0\x83\x1a\xf0\xb0\x06\xa8\x1a\xf0\xa0\x56\xd6\x68\x30\x18\x0c\x06\x83\xc1\xf0\x8f\xe3\xb9\x63\x35\x89\x7a\x20\xf2\xdc\xa1\x48\x27\x5a\xd2\xf2\x34\x2a\x24\x2d\x47\x61\x25\xeb\x91\xe4\x11\xf7\xd5\xc1\x0c\x51\x96\xf1\x38\xc8\xf3\xa5\x19\xad\x27\x12\x15\x8a\xb8\x77\x68\x56\xeb\xb6\xc9\xb9\xce\x14\x1f\x89\x74\x4e\xed\xa3\x56\x85\x11\xed\xb2\x68\xca\xbb\x76\x96\x39\x77\xb5\x94\xe7\x36\x65\x59\x38\x24\xe7\xce\x22\x38\x0f\xf2\x5c\x96\x52\xd7\xae\x24\xbb\xcc\xe3\x70\x6a\x29\x8b\x47\x9c\x9c\x7e\x15\x34\xe4\x72\x29\xa8\x57\x18\x53\xcc\x26\xbc\x6b\xfb\x65\x5e\xf6\x52\xbd\x11\x1b\xf0\x88\x86\x22\x5d\x5e\xae\x0a\x58\xd3\xdd\xd1\x0a\xfb\xcd\x3a\xe8\xd5\x91\xbe\x85\x71\x32\x55\xa4\xe6\x09\xef\xda\x8a\xef\x29\xbb\x8c\xc9\xf7\x92\x30\xe5\xd2\x76\x8f\x8f\x59\x2d\xf7\x6e\x68\x81\x2d\xba\xd3\x67\x8a\xff\x25\x32\x91\x77\xa9\xdd\xde\xda\xe8\x6f\x50\x92\x8a\x01\x1b\x44\x73\x1a\xb3\x5d\x4e\x4a\xd0\x2c\x0d\x15\x27\x46\x01\x53\x9c\x92\xd0\xdf\xe1\x29\x89\x94\xa4\x98\x70\x35\x0e\xe3\x51\xbb\x7d\x7a\xfe\x3a\x67\x96\x72\x56\xa6\x1d\x0b\xc5\xa5\x4d\xa9\x98\xc9\xae\xdd\x59\xb1\xc9\x17\x91\xec\xda\x2f\xaf\xd8\xbd\x2c\x73\xfa\xce\xba\x5e\xcf\x73\xcf\xad\xec\x8e\x2f\xaf\x70\xd3\x5b\x68\x3f\x81\x66\x06\x62\xc2\xc2\xd8\x5e\x3a\x3f\x7d\xa7\xbf\x98\xcb\xf3\x93\x3a\x5c\xda\xf4\x0a\xbd\x27\x90\x44\xf5\x1b\x61\x9b\x52\xfe\xf6\x34\x4c\x79\x70\x42\xe4\x7d\xc5\xde\x66\x29\xfd\xdd\xae\xb2\x07\x6c\x8f\xa4\x9a\x0e\x87\x7a\x4b\x93\x69\x14\x51\xe5\x80\x66\x63\x1e\x53\xc0\xa5\x0e\xe6\x38\xce\x59\xf6\xf3\xa4\xec\xa7\x92\xa7\xf7\xb5\x78\xb8\x8b\xdb\x92\xa7\xeb\x6c\xb2\xb8\x8a\xa7\x94\x75\xe0\xa1\xa7\xad\x48\x9b\x9d\xdc\x56\xaf\x7a\x69\x0e\x65\x34\x0e\x83\x80\xc7\x55\x4e\x59\xe6\xbc\xea\xbc\xe2\xeb\xc3\x7f\x53\xa4\x93\x2a\x8f\x32\xbf\xe5\xdf\x65\xdb\xe4\x9e\xcd\xdb\xed\xa2\x06\x79\x4b\x8c\xc2\xe3\x9c\xaa\x74\xca\xb5\x33\x3a\x93\xb7\x75\x11\xfb\xfc\x18\x2f\xe5\x55\x88\xfd\xc5\x64\xe1\xcd\xd3\xcf\x2c\xe9\x9b\x27\x82\xae\xbd\xb9\x71\x67\xcb\x26\xb6\xa8\xad\x74\xb6\x99\x0a\x9f\x4b\xa9\xdd\xdd\x12\x7e\x9e\x2f\x5e\x23\x6f\xdc\xe9\x6d\x27\xfa\x02\xbb\xeb\x7c\x46\xd5\x81\xf1\xdc\x71\xa7\x78\xbc\xa5\x9a\x47\xbc\xa8\xbd\x7a\xde\xf4\xb6\xb6\x59\x14\x8e\xe2\x35\x4a\xc3\xd1\x58\x5d\x2b\x17\x66\x61\xa0\xc6\x6b\xb4\xda\x59\x49\xf6\xaa\xb9\x20\x94\x49\xc4\xe6\x6b\x14\xc6\x51\x18\xf3\xf6\x20\x12\xfe\x4e\xb1\x58\xec\x6d\x76\xc8\x77\x14\x4a\xd5\x5e\xc4\x5c\xa3\x58\xc4\xbc\xd0\x9c\x16\x6a\xde\x62\x61\xe9\x70\xb9\xbe\x94\x76\x0f\x5e\xf1\xb7\x66\xff\x48\xeb\x21\x71\xe9\xb3\xa4\x7c\x84\xbc\x4b\xfd\x8d\xeb\x5b\xf7\x36\x6f\x50\xa1\xf9\x67\x00\x00\x00\xff\xff\x58\x94\x5f\xbf\x00\x30\x00\x00")

func dataNew_passwordHtmlSwpBytes() ([]byte, error) {
	return bindataRead(
		_dataNew_passwordHtmlSwp,
		"data/.new_password.html.swp",
	)
}

func dataNew_passwordHtmlSwp() (*asset, error) {
	bytes, err := dataNew_passwordHtmlSwpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/.new_password.html.swp", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1481257291, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataLoginHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x93\xcd\x6e\xdc\x20\x10\xc7\xef\x79\x8a\x29\xf7\x0d\xdd\xe6\xe6\xb0\x48\x55\xd2\xf6\x12\x6d\x56\x4d\x7a\xe8\x91\x35\xe3\x05\x15\x83\x0b\xb8\xce\x6a\xe5\x77\xaf\x00\x7b\x9d\x4a\xa9\x9a\xf4\x82\x87\xf9\xf8\xfd\x67\x3c\x36\x7b\x77\x7b\x7f\xf3\xf8\x7d\xf7\x09\x54\x6c\x0d\xbf\x60\xe5\x01\xc0\x42\x3c\x1a\x84\x78\xec\x70\x43\x22\x3e\x45\x5a\x87\x40\x52\x04\xa0\x37\x70\xca\x06\x80\xd1\x21\xae\x72\x6a\x05\xd6\x59\xbc\xce\xfe\x31\x9f\x46\xec\x71\xc9\x94\x3a\x74\x46\x1c\x2b\xd0\xd6\x68\x8b\xab\xbd\x71\xf5\x8f\xeb\x29\x38\x68\x19\x55\x05\x1f\xd6\xef\xbb\xa7\xd9\x97\x44\x57\xc2\xe8\x83\xad\xc0\xeb\x83\x8a\x0b\x9b\xd1\x2c\x99\xfb\x54\x6b\x7e\xe7\x0e\xda\x32\xaa\xd6\xc5\x71\xc5\x99\x00\xe5\xb1\xd9\x90\xd3\xe9\xf2\xcb\xe5\x16\x87\x6f\x01\xfd\x9d\xab\xc7\x91\xf0\x2d\x0e\x8c\x0a\xce\xa8\xba\xca\xe9\x8d\xf3\x2d\xb4\x18\x95\x93\x1b\xb2\xbb\x7f\x78\x24\x20\xea\xa8\x9d\x9d\xaa\x77\xde\xd5\x18\xc2\x67\xe7\xdb\x89\x90\xdb\x60\xda\x76\x7d\x9c\xde\x8f\xd2\x52\xa2\x25\x60\x45\x8b\xb3\xa8\xb3\x35\xa6\xa2\xad\x68\x71\x1c\x09\xfc\x12\xa6\x2f\xc1\xdb\x12\x4c\x4e\xca\xe1\x55\xb4\xaf\xf8\xb3\xd7\x1e\x43\x9e\xf4\x05\x6a\x23\x4c\xc0\xd7\xe3\x3e\xe6\x01\x5f\xe0\x98\xc4\x4f\x9c\x82\xe9\x0d\x9f\x96\xc1\x8c\x9e\xcd\x74\xc9\x9b\x6d\x9c\xdf\x90\x44\x25\x3c\x61\x2a\x60\x34\x07\x9e\x25\x3e\xef\x23\xed\x73\xee\x22\x57\x81\x2f\x53\x49\x7a\x56\xa1\x8b\xcc\x5f\x15\x3b\x11\xc2\xe0\xbc\x24\x7c\x37\x59\x6f\x51\x3e\x57\xff\xa7\xfa\x8d\x93\x48\x78\x3a\xdf\xa2\x5a\xa7\xaa\x7f\x2b\x16\x21\x3e\x73\xff\xc0\x85\x7e\xdf\xea\x78\xde\xd4\x43\xb9\x52\xbe\x30\x18\x2d\xfb\x62\x34\x7d\xd3\xfc\x82\xd1\xf2\x33\xff\x0e\x00\x00\xff\xff\x40\x24\xa4\x45\xe4\x03\x00\x00")

func dataLoginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataLoginHtml,
		"data/login.html",
	)
}

func dataLoginHtml() (*asset, error) {
	bytes, err := dataLoginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/login.html", size: 996, mode: os.FileMode(420), modTime: time.Unix(1480984338, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataNewHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x53\xc9\x6e\xdb\x30\x10\xbd\xe7\x2b\xa6\x3c\xd7\x61\x1b\xa4\x3e\xc8\x94\x80\xb6\x69\x7b\x09\x12\xc7\xce\xa5\xa7\x80\x96\xc6\x12\x51\x2e\x0a\x49\xd5\x36\x0c\xfd\x7b\x41\x52\xde\x0a\x07\x88\x2f\x12\x39\xcb\x7b\x6f\x16\xb2\x0f\x77\x8f\xdf\x9f\x7f\x4f\x7f\x40\xe3\x95\x2c\xae\x58\xfa\x01\x30\xe7\x37\x12\xc1\x6f\x5a\xcc\x89\xc7\xb5\xa7\xa5\x73\x24\x78\x00\x3a\x09\xdb\x78\x00\x90\xc2\xf9\x51\x0c\xcd\x40\x1b\x8d\x93\x68\xef\xe3\x57\xf2\x05\x1e\x22\x2b\xe1\x5a\xc9\x37\x19\x08\x2d\x85\xc6\xd1\x42\x9a\xf2\xcf\x64\x70\xae\x44\xe5\x9b\x0c\x6e\x3e\x7f\x6a\xd7\x3b\x5b\x20\x1d\x71\x29\x6a\x9d\x81\x15\x75\xe3\x0f\xd8\x8c\x46\xca\xa8\x73\x69\xac\x02\x85\xbe\x31\x55\x4e\xa6\x8f\xf3\x67\x02\xbc\xf4\xc2\xe8\x9c\x6c\xb7\xd7\xbf\xae\xa7\xd6\x94\xe8\xdc\x4f\x63\xd5\xbd\x29\xfb\x7e\xa8\x81\x09\xdd\x76\x7e\xa8\xaf\x11\x55\x85\x9a\x80\xe6\x0a\x87\xb4\x07\xa3\x4b\x0c\x49\x0f\x5c\x61\xdf\x13\xf8\xcb\x65\x97\x9c\x77\xc9\x19\x8c\xb4\x80\x77\xa1\xcd\xf0\xb5\x13\x16\xdd\xbd\xa9\x85\x3e\x83\xba\xe4\xd2\xe1\xbb\xe0\x5e\xed\x8b\xc3\xd2\xa2\x3f\x55\xf4\x34\x9b\x47\xeb\x25\xa2\xbe\xc6\x36\x9d\x51\xa3\x71\xf5\xd2\x39\xb4\x01\x2a\x21\x75\xb2\x18\xa6\xc2\xa4\xd8\x1d\xc3\x25\x8e\x78\x69\x6c\x4e\x02\x30\x29\x02\x52\x06\x8c\x46\xc7\x51\xe0\xb1\x94\x30\xd8\x9d\x90\x98\x05\x36\xb5\xa7\xa2\x7b\x16\x7a\xa0\x79\x93\xb1\xe5\xce\xad\x8c\xad\x48\x31\x1d\x4e\x97\x30\xef\xb3\x2f\x66\x2f\x9e\x66\x90\xba\x7d\x86\x4d\xd5\xd0\x60\xd8\xd6\x9c\xdc\x7c\x19\xb7\x6b\x92\x76\x7b\x7f\x73\xb6\xcc\x49\xc5\x3d\xcf\x84\xe2\x35\xd2\x56\xd7\x93\x05\x77\x38\xbe\xfd\x08\x27\x93\xfc\x36\xbe\xed\x7b\x42\x8b\xff\xc5\x0c\x1a\x76\xd4\x27\xf5\xb9\x6e\xa1\xc4\x61\x33\xe6\xe9\x7a\x8c\xc1\x68\x1a\x25\xa3\xe1\xdd\x14\x57\x8c\xa6\x07\xff\x2f\x00\x00\xff\xff\xe0\x04\xf0\x0a\x08\x04\x00\x00")

func dataNewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataNewHtml,
		"data/new.html",
	)
}

func dataNewHtml() (*asset, error) {
	bytes, err := dataNewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/new.html", size: 1032, mode: os.FileMode(420), modTime: time.Unix(1480982999, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataNew_passwordHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x55\x41\x6f\xe2\x3a\x10\xbe\xf7\x57\x4c\x7d\x4f\x5c\x9e\xf4\x2e\xd4\x58\x7a\x2a\x7d\xef\x52\x01\x7a\x6d\x57\xda\x53\x65\x92\x81\x78\x6b\xec\xac\xed\x14\x50\x94\xff\xbe\xb2\xe3\x34\xb0\xcb\xa1\x5c\xc8\x24\x9e\xf9\xbe\x6f\x3e\x8f\x0d\xbb\x9d\x2f\x1f\x5e\xbe\xaf\x1e\xa1\xf2\x3b\xc5\x6f\xd8\x6d\x96\xbd\x2c\xe7\xcb\xf8\x0a\xe8\x0a\x51\x4b\xbd\xcd\x32\x7e\xc3\xfa\x04\x00\xe6\xfc\x51\x21\xf8\x63\x8d\x33\xe2\xf1\xe0\x69\xe1\x1c\x09\x2b\x00\x8d\x82\x36\x06\x00\x4a\x3a\x9f\xc5\xd4\x29\x68\xa3\xf1\x3e\x7e\xef\xe2\xaf\x12\x6b\x1c\x33\x4b\xe9\x6a\x25\x8e\x53\x90\x5a\x49\x8d\xd9\x5a\x99\xe2\xfd\x3e\x2d\xee\x65\xe9\xab\x29\xfc\x35\xb9\xab\x0f\xc3\xb7\x40\x9a\x09\x25\xb7\x7a\x0a\x56\x6e\x2b\x3f\x62\x33\x1a\x29\xa3\xce\x6a\xc2\x5f\xeb\x52\x78\xa4\x0b\xdc\xc3\x4a\x38\xb7\x37\xb6\x64\xb4\x9a\xc4\xe5\x8d\xb1\x3b\xd8\xa1\xaf\x4c\x39\x23\xab\xe5\xf3\x0b\x01\x51\x78\x69\xf4\x8c\xb4\x6d\xfe\x5f\xbe\xb2\xa6\x40\xe7\xfe\x35\x76\xf7\x64\x8a\xae\x4b\x2d\x32\xa9\xeb\xc6\xa7\xf6\x2b\x59\x96\xa8\x09\x68\xb1\xc3\x54\xb6\x30\xba\xc0\x50\xb4\x10\x3b\xec\x3a\x02\x1f\x42\x35\xfd\xe2\xbc\x5f\x0c\x1f\x29\x87\x2f\xa1\xfd\x8f\x3f\x1b\x69\xd1\x3d\x99\xad\xd4\x17\x50\xbd\x6d\xf0\xeb\x68\xff\xc4\xfe\x2e\xc0\x68\xdc\xbf\xd5\xc9\xa0\x00\xd7\xa3\x35\x8a\x27\xc7\x99\x92\x43\x18\x5e\xe2\xf6\x6d\x8c\x9d\x91\xc6\xa1\x7d\x0b\x0c\x84\xbf\x3a\xb4\x10\x70\xa7\xc0\x68\x4c\x39\x29\x39\x15\x16\xb6\x6f\x90\x35\xd6\x9f\xf9\x14\xb0\x06\x89\xb6\xb7\xa0\xa4\x9f\x62\xe8\xa8\xe6\x5c\xd8\x30\xbc\xe2\x87\x38\x80\xf3\xcd\x66\x03\xde\x40\xdd\x28\x05\x43\x77\xb0\xaf\x50\x43\x89\x2e\x40\xe6\x79\x1e\x46\xfb\x52\x63\x9f\x6e\xf0\x61\x70\xae\x69\x6b\xf4\xf2\x0a\xf5\x27\xec\xa5\xd9\x09\xa9\x09\x9f\xc7\xe7\x35\xcc\xa9\xf2\xcc\xcd\x1e\xa5\xeb\xc8\x75\x22\xb4\xf1\xe8\x08\x5f\x84\xc7\x25\x09\x81\x56\x58\x14\x89\xb9\x4f\x07\x6b\xf6\x6e\x46\x26\x77\x04\x0a\xa3\xdc\x8c\xfc\x7d\x47\x78\x9a\x7d\x8f\xae\xeb\x18\x1d\xea\xbe\xbe\x9f\xb5\x35\x6b\xb1\x56\x47\xa8\xc4\x07\x86\x2d\xdd\x5b\xe9\x11\x04\x84\xd3\x0d\xb5\x2c\xde\xd1\x82\xb1\xe0\x4c\x38\xcf\xe9\xc2\xba\xd4\x12\x1e\xea\x70\x9a\x08\x7f\x0c\x81\x08\xa7\x01\xe6\xc2\x5f\x35\xb2\x03\xc6\x75\x66\x16\xc2\xe3\xd6\xd8\x23\xe1\x0f\x29\xba\xc4\xe9\x50\x61\xe1\x13\xd1\x58\xf2\x99\x00\xd0\xb6\x56\xe8\x2d\x42\x3e\xcf\x13\x90\x0c\xae\x9e\x64\x00\x30\x53\xc7\xce\xc6\x19\xf8\x16\xa2\x70\x98\xda\x56\x6e\x20\x7f\x8e\x34\x58\x76\x9d\x4b\xd1\x8c\x0c\x11\x69\x5b\xd4\x65\xd7\xf1\x33\xc8\x40\x9c\xc1\x40\x79\x84\xec\x77\x4a\xda\x73\x9e\x4b\x8d\x40\x63\x77\xb4\xe7\xf8\xd3\x37\x46\xfb\xab\x86\xd1\x70\x29\xf3\x1b\x46\xfb\x3f\x9b\x5f\x01\x00\x00\xff\xff\x49\x5e\x9c\xb9\x9e\x06\x00\x00")

func dataNew_passwordHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataNew_passwordHtml,
		"data/new_password.html",
	)
}

func dataNew_passwordHtml() (*asset, error) {
	bytes, err := dataNew_passwordHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/new_password.html", size: 1694, mode: os.FileMode(420), modTime: time.Unix(1481257291, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPasswordsHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x81\x50\x0a\x0a\x36\x19\x86\x76\x01\x89\xc5\xc5\xe5\xf9\x45\x29\xc5\x36\xfa\x19\x86\x10\x41\x63\x3b\x9b\x44\x85\x8c\xa2\xd4\x34\x5b\xa5\xea\x6a\x3d\x77\x3d\xbf\xd4\x72\x98\x2a\x9f\xfc\xe4\xda\x5a\x25\x3b\xbf\xd4\x72\x1b\xfd\x44\x3b\x1b\xfd\x0c\x63\x3b\x2e\x1b\x7d\x88\x79\x80\x00\x00\x00\xff\xff\x4f\xf3\xa0\xb8\x67\x00\x00\x00")

func dataPasswordsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataPasswordsHtml,
		"data/passwords.html",
	)
}

func dataPasswordsHtml() (*asset, error) {
	bytes, err := dataPasswordsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/passwords.html", size: 103, mode: os.FileMode(420), modTime: time.Unix(1480799587, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/.new.html.swp": dataNewHtmlSwp,
	"data/.new_password.html.swp": dataNew_passwordHtmlSwp,
	"data/login.html": dataLoginHtml,
	"data/new.html": dataNewHtml,
	"data/new_password.html": dataNew_passwordHtml,
	"data/passwords.html": dataPasswordsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		".new.html.swp": &bintree{dataNewHtmlSwp, map[string]*bintree{}},
		".new_password.html.swp": &bintree{dataNew_passwordHtmlSwp, map[string]*bintree{}},
		"login.html": &bintree{dataLoginHtml, map[string]*bintree{}},
		"new.html": &bintree{dataNewHtml, map[string]*bintree{}},
		"new_password.html": &bintree{dataNew_passwordHtml, map[string]*bintree{}},
		"passwords.html": &bintree{dataPasswordsHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

