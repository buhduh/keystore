// Code generated by go-bindata.
// sources:
// data/.passwords.html.swp
// data/edit_password.html
// data/login.html
// data/new.html
// data/passwords.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataPasswordsHtmlSwp = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9a\xcf\x6f\xdc\xc4\x1b\xc6\x9f\xf6\xf4\xed\x6e\xd6\xae\xbe\x94\xfb\xd4\x2d\xb4\x48\x5d\x3b\xa1\x45\x90\xc5\x6b\x29\xca\x46\x69\x0b\x4d\x82\x48\xa1\x1c\x50\x35\xeb\x99\xac\xdd\x78\x6d\xcb\x9e\x90\x5d\x59\x2e\xaa\xe0\x3f\x40\xe2\xc2\x0d\x09\x0e\x1c\x10\x12\xe2\x80\x7a\xe0\x02\x48\x20\x24\x24\x4e\x9c\x38\xf4\x8a\x04\xe4\xc2\x01\x71\x40\xe3\x1f\xc9\xee\x26\x52\x72\x02\x81\xe6\x73\xf1\xcc\xe3\xf7\x9d\x79\x66\xe6\xf5\x48\x51\xb6\x3f\xff\xca\x8d\x5b\xe4\x59\xf3\x1a\x00\x9c\x05\x7e\xfc\x38\xb8\xf3\xd9\xd9\x35\xec\x5d\x03\x18\x0d\x38\x4e\x00\xe3\x7d\x9f\x86\xc7\xc7\xdd\x97\x03\x5a\x41\xe4\xd2\xc0\x1a\x44\x56\x9a\xb8\xd6\x36\x1f\xa7\x22\x4a\xb8\xc5\xa8\xa0\x56\x4c\xd3\x74\x37\x4a\x58\x6a\x7a\x62\x18\x9c\x64\x6a\x85\x42\x71\x12\x76\xc4\x56\xfb\xb9\x16\xae\x3e\xbd\x30\x2f\xbb\x17\x8c\xf3\xe4\xb1\xff\xdf\xfe\xa7\x5d\x29\x14\x0a\x85\x42\xa1\x50\x28\x14\x8a\xbf\x11\x11\x9f\xc2\x9b\x00\x4e\x57\x7d\xbb\x7a\x9e\x9a\x79\x2a\x14\x0a\x85\x42\xa1\x50\x28\x14\x0a\x85\x42\xa1\xf8\xf7\x42\x19\xf0\xe8\x7f\xc0\x2f\x67\xca\xff\xff\xd7\x7f\xff\xff\xa6\x03\x5f\xeb\xc0\x17\x3a\xf0\x81\x0e\xbc\xa7\x03\x6f\xeb\xc0\x7d\x1d\x48\x74\xe0\x25\x1d\x78\x41\x07\x1c\x1d\x20\x3a\x70\x46\x07\xf6\x34\xe0\x67\x0d\x78\xa4\x01\xdf\x6a\xc0\x97\x1a\xf0\x91\x06\xbc\xa3\x01\x0f\x34\x20\xd4\x00\x4f\x03\x5e\xd7\x80\xeb\x1a\xf0\xb8\x06\x68\x1a\xf0\x47\x0b\xf8\xa1\x05\x7c\xd3\x02\x3e\x69\x01\xef\xb7\x80\xb5\x16\xe0\xb4\x80\x27\x5a\xc0\xb9\x16\xb0\x37\x07\x7c\x37\x07\x7c\x3e\x07\xbc\x3b\x07\x2c\xcf\x01\x7f\x36\x81\x87\x4d\xe0\xc3\x26\xf0\xa0\x09\x5c\x6e\x02\xe7\x9a\xc0\xa9\x26\xf0\x6b\x03\xf8\xa9\x01\x7c\xdf\x00\xbe\x6a\x00\x0f\x1b\xc0\xa7\x0d\xe0\xad\x06\x70\xbd\x01\x3c\xd9\x00\x4e\x37\x80\xdf\xcf\x54\x6b\x57\x28\x14\x0a\x85\x42\xa1\xf8\x4f\x62\x5b\x9e\x18\x06\x0e\x08\xb1\xad\xd4\x4d\xfc\x58\xc8\x36\x21\x4b\x37\x97\xee\xdc\x5d\xd9\x20\x5d\x62\x64\x99\xb9\x6a\x2e\xdd\xa3\xa3\x95\x90\xc5\x91\x1f\x8a\x3c\x37\x64\x7c\x19\x4e\xc4\x38\xe6\x5d\x43\xf0\x91\xb0\xee\xd1\x37\x68\xa9\x1a\xce\xb1\x11\x24\x4d\xdc\xae\x1c\xbc\x67\xde\x7c\x39\xcf\x0d\x67\xd2\x80\xed\x87\xf1\xce\x64\xa6\x41\x7c\xd6\x35\xea\x9f\x83\xde\x75\xa3\x50\x50\x3f\xe4\x89\x41\xac\xd2\xfc\x4e\xb1\x88\x2c\xe3\x21\xcb\xf3\x62\x09\xb6\x15\xf8\xe5\x62\x64\x5b\xd0\x7e\xc0\xeb\x6e\x21\xf4\x23\x36\x3e\x10\xa6\x73\x27\xc2\x12\x87\x4c\x49\x85\xc8\x9c\x19\x4d\x52\x2d\xe8\xe2\x20\x88\xfa\x34\x30\x7b\x3c\xe0\x82\xdf\x18\x0e\xf2\xdc\x20\x51\xe8\x06\xbe\xbb\xdd\x35\x58\xa1\x6e\xbc\x7a\xf9\x52\x96\x99\x9b\xd1\x36\x0f\xd3\x2a\x32\xcf\x2f\x3d\x65\x58\x87\x07\xb6\xfd\xe1\x80\xb8\x01\x4d\xd3\x3a\xdb\x98\x75\x24\x3d\xd1\xa3\x2c\x4d\xe6\x72\xe6\x1f\xec\x7a\x6d\x72\x85\xf9\xa2\xb2\x78\xd4\xd4\x94\x78\x09\xdf\x9a\x4d\xd8\xa8\x8e\xe1\xc5\xc8\xcd\xf3\x83\x65\xc8\x57\xf2\x20\x8f\xdf\x9a\xe5\x28\x1e\xcf\x6e\x8c\x1b\xc5\xe3\xe9\x6d\x91\x51\x27\xd9\x14\x99\x79\x68\x4b\xec\xc3\x67\x24\xa5\x2c\x33\x6f\xa7\x3c\x59\xa3\x43\x9e\xe7\x47\x1d\x64\x15\xd4\x8b\x86\xd4\x0f\x8f\x0a\xb1\x45\x32\x5d\x35\x09\x0d\x07\x9c\x5c\x8c\x77\xd3\x89\xe2\xb1\x67\xca\xcb\x16\x5e\xc2\x29\x73\x64\xb6\x2d\x3c\xa7\x1c\xdf\xb6\x84\x57\x74\xa5\x27\x22\x4d\xed\x2b\x4b\xae\xf0\xa3\x30\x2d\xfb\xb2\x0a\x65\xab\x18\xa2\x2e\xe9\xa9\x8a\xb6\xbd\xab\x4e\x96\x5d\x74\xa9\x90\x9e\xbd\xab\x55\xd1\xda\xe5\x27\xb0\x6f\xd2\xa5\xe2\x4a\x61\x95\x74\xba\xc4\xec\x99\x3d\x3f\x8d\x03\x3a\xbe\x45\xe3\xc2\xfb\xfe\x09\x15\xaf\x57\x0b\xcd\x2e\xbf\x2c\x39\xc1\x44\x39\x98\xab\xe6\x1a\xdf\x9d\x2a\x04\xc3\x59\xe3\xbb\xb2\x0e\x8b\xf9\x8b\x94\x05\xa7\x8e\x48\x6d\xcb\x5b\xa8\xae\x19\x31\xae\x7d\xd7\xfb\xe5\x71\x7f\xe0\x89\x0e\x99\x8f\x47\xcf\x57\xd2\xae\xcf\x84\x37\xa5\xb0\xd2\x6b\x87\x78\x3e\x63\x3c\x2c\xe5\x0b\x87\xaf\x04\x92\x4d\x8d\x1d\xf8\xa9\x68\x17\x73\x76\x48\x18\x85\xbc\xcc\xdb\x09\x66\xc2\xe4\x25\xd3\xa6\x81\x3f\x08\x3b\x24\xe0\x5b\xa2\x9e\x35\xa6\x8c\xf9\xe1\xa0\x43\xe6\xcd\x67\x12\x3e\xac\xe5\x7e\x94\x30\x9e\x74\xc8\x42\x3c\x22\x69\x14\xf8\x8c\x5c\x58\x5c\x5c\x2c\xdf\x0a\x76\x85\x08\x6f\x66\xfc\x32\xa1\xed\x46\x41\x40\xe3\x94\x77\x48\xdd\xaa\x72\xe4\x61\xce\xa4\xb8\x3b\x49\x1a\x25\x1d\x52\x5c\xba\x3c\x29\x03\x65\xdd\x67\xc5\xe5\x2a\x97\x34\x79\xb7\xba\x69\x6a\x38\xb0\xcb\xfb\xdc\x3e\xdf\x6e\x93\xcd\xf5\xde\x3a\xe1\xa3\xd8\x4f\xa8\x2c\x26\x22\x22\x12\x27\x51\xcc\x13\x92\x8e\x43\x41\x47\xa4\xdd\x96\x91\xbd\xf5\xe5\xcd\xd7\x36\x56\x48\x99\xf9\x57\x00\x00\x00\xff\xff\x20\xf7\x36\x1e\x00\x30\x00\x00")

func dataPasswordsHtmlSwpBytes() ([]byte, error) {
	return bindataRead(
		_dataPasswordsHtmlSwp,
		"data/.passwords.html.swp",
	)
}

func dataPasswordsHtmlSwp() (*asset, error) {
	bytes, err := dataPasswordsHtmlSwpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/.passwords.html.swp", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1483517734, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataEdit_passwordHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x55\x5f\x6f\xfa\x36\x14\x7d\xef\xa7\xb8\xf5\x7b\x08\x4c\xda\x0b\x75\x22\x4d\x4d\x37\x4d\x6a\x01\xad\xed\x24\x9e\x2a\x93\x5c\x88\x35\xc7\xce\x6c\xa7\x14\x45\xfe\xee\x93\x13\x07\x88\x46\x7f\x2d\xbf\x17\x70\x7c\xef\x3d\xe7\xdc\x3f\xb9\xa1\xb7\xd9\xf2\xfe\x65\xbd\x7a\x80\xd2\x56\x22\xbd\xa1\xb7\x51\xf4\xb2\xcc\x96\xdd\x23\xa0\xc9\x59\xcd\xe5\x2e\x8a\xd2\x1b\xda\x3b\x00\x50\x63\x0f\x02\xc1\x1e\x6a\x4c\x88\xc5\x0f\x1b\xe7\xc6\x10\x6f\x01\x68\x04\xb4\xdd\x01\x40\x70\x63\xa3\xce\x75\x0e\x52\x49\xbc\xeb\xee\x5d\xf7\x2b\xd8\x06\x4f\x9e\x05\x37\xb5\x60\x87\x39\x70\x29\xb8\xc4\x68\x23\x54\xfe\xcf\x5d\x30\xee\x79\x61\xcb\x39\xfc\x32\x9b\xd6\x1f\xc3\x9d\x27\x8d\x98\xe0\x3b\x39\x07\xcd\x77\xa5\x3d\x61\xd3\xb8\xa3\xec\x74\x96\xb3\xf4\xb5\x2e\x98\xc5\x78\x81\x7b\x58\x31\x63\xf6\x4a\x17\x34\x2e\x67\x9d\x79\xab\x74\x05\x15\xda\x52\x15\x09\x59\x2d\x9f\x5f\x08\xb0\xdc\x72\x25\x13\xd2\xb6\x93\x3f\x26\x2b\xad\x72\x34\xe6\x77\xa5\xab\x47\x95\x3b\x17\x52\xa4\x5c\xd6\x8d\x0d\xe9\x97\xbc\x28\x50\x12\x90\xac\xc2\x10\xb6\x50\x32\x47\x1f\xb4\x60\x15\x3a\x47\xe0\x9d\x89\xa6\x37\x66\xbd\xd1\x5f\xc6\x29\x7c\x0b\xed\x2f\xfc\xb7\xe1\x1a\xcd\xa3\xda\x71\x79\x01\xd5\xea\x06\xbf\x8f\xf6\x5b\x97\xdf\x67\xe2\x7a\x6b\xaf\xee\x2b\x38\x5e\x8c\x63\xff\xcc\xce\xe3\x1a\x91\x86\x56\x51\xc1\x87\xa3\x7f\xe8\xfa\xbe\x55\x3a\x21\x8d\x41\xfd\xe6\xb1\x48\xfa\x6a\x50\x83\x17\x34\x07\x1a\x77\x2e\x67\x21\xe7\x12\x7c\xdf\x07\x01\xa7\xf8\x91\x0e\x8f\x35\xe4\xa6\xfb\xda\x15\xf1\x51\x4c\x7c\x52\xf3\xa9\xb0\x3a\xcc\x09\x49\x87\x89\xb9\x46\xd6\x31\x7a\xa4\x6a\x40\xfa\x79\x55\x85\xaa\x18\x97\x24\xcd\xba\xff\x6b\x14\x85\xc8\x91\x9e\x1e\xc5\x39\x72\x9d\x08\xa9\x2c\x1a\x92\x2e\xfc\xdf\x25\x09\x9e\x96\x69\x64\x81\xb9\x77\x07\xad\xf6\x26\x21\xb3\x29\x81\x5c\x09\x93\x90\x5f\xa7\x24\x0d\x2f\x83\x45\xe3\x1c\x8d\x87\xb8\xab\xc4\xe0\x47\xed\x5f\x0c\x92\x3e\xf8\x03\xf3\xa3\x0b\x19\xb3\x5f\x0e\x91\x5f\x08\x43\x6d\x06\x8c\x51\x71\x1e\xfa\x4b\xdf\xab\x5a\xb0\x1c\x4b\x25\x0a\xd4\x09\x59\xaf\xd7\xeb\xe8\xe9\x29\xca\xb2\xef\x94\x6d\xd8\xa3\x05\x37\x6c\x23\x10\xf8\x16\x24\xee\x41\xd5\x9d\x50\x6e\x40\x2a\x0b\x06\x05\xe6\x16\x0b\xbf\x5f\x2f\x16\x1c\xf7\x6f\x39\xb3\xb8\x53\xfa\x40\x52\xbf\xc5\xee\xc3\xd3\x35\x13\x30\x42\xb9\xae\xe3\x27\xf2\x1f\x11\xf7\x69\x04\xb6\x53\xc8\xd1\x01\x80\x86\xbc\x43\x9d\xa7\xe3\x64\x68\xdc\x9b\xcf\x23\xda\x56\x33\xb9\x43\x98\x64\x93\xe0\xc6\x7d\x4f\x3e\xc7\x6c\xdb\xc9\xdf\xfe\xe4\x1c\x69\x5b\xbe\x85\xc9\x73\x28\xae\x73\xc7\x3a\x27\x64\x38\x91\xb6\x45\x59\x38\x77\x4e\xe9\x49\x23\x18\xe8\x0e\x10\x8d\xe9\x2e\x8a\xec\x40\x4e\x95\x88\x7b\xfc\xff\xd7\x98\xc6\xc3\x4e\x1c\xb5\xc9\x34\x9b\x8a\xdb\xe3\xfc\x3d\xb3\x77\x0c\x5b\x94\xc6\xfe\xfb\x94\xde\xd0\xb8\xff\xee\xfe\x17\x00\x00\xff\xff\x39\xb4\xd1\x00\xa9\x07\x00\x00")

func dataEdit_passwordHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataEdit_passwordHtml,
		"data/edit_password.html",
	)
}

func dataEdit_passwordHtml() (*asset, error) {
	bytes, err := dataEdit_passwordHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/edit_password.html", size: 1961, mode: os.FileMode(420), modTime: time.Unix(1483431333, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataLoginHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x93\xcd\x6e\xdc\x20\x10\xc7\xef\x79\x8a\x29\xf7\x0d\xdd\xe6\xe6\xb0\x48\x55\xd2\xf6\x12\x6d\x56\x4d\x7a\xe8\x91\x35\xe3\x05\x15\x83\x0b\xb8\xce\x6a\xe5\x77\xaf\x00\x7b\x9d\x4a\xa9\x9a\xf4\x82\x87\xf9\xf8\xfd\x67\x3c\x36\x7b\x77\x7b\x7f\xf3\xf8\x7d\xf7\x09\x54\x6c\x0d\xbf\x60\xe5\x01\xc0\x42\x3c\x1a\x84\x78\xec\x70\x43\x22\x3e\x45\x5a\x87\x40\x52\x04\xa0\x37\x70\xca\x06\x80\xd1\x21\xae\x72\x6a\x05\xd6\x59\xbc\xce\xfe\x31\x9f\x46\xec\x71\xc9\x94\x3a\x74\x46\x1c\x2b\xd0\xd6\x68\x8b\xab\xbd\x71\xf5\x8f\xeb\x29\x38\x68\x19\x55\x05\x1f\xd6\xef\xbb\xa7\xd9\x97\x44\x57\xc2\xe8\x83\xad\xc0\xeb\x83\x8a\x0b\x9b\xd1\x2c\x99\xfb\x54\x6b\x7e\xe7\x0e\xda\x32\xaa\xd6\xc5\x71\xc5\x99\x00\xe5\xb1\xd9\x90\xd3\xe9\xf2\xcb\xe5\x16\x87\x6f\x01\xfd\x9d\xab\xc7\x91\xf0\x2d\x0e\x8c\x0a\xce\xa8\xba\xca\xe9\x8d\xf3\x2d\xb4\x18\x95\x93\x1b\xb2\xbb\x7f\x78\x24\x20\xea\xa8\x9d\x9d\xaa\x77\xde\xd5\x18\xc2\x67\xe7\xdb\x89\x90\xdb\x60\xda\x76\x7d\x9c\xde\x8f\xd2\x52\xa2\x25\x60\x45\x8b\xb3\xa8\xb3\x35\xa6\xa2\xad\x68\x71\x1c\x09\xfc\x12\xa6\x2f\xc1\xdb\x12\x4c\x4e\xca\xe1\x55\xb4\xaf\xf8\xb3\xd7\x1e\x43\x9e\xf4\x05\x6a\x23\x4c\xc0\xd7\xe3\x3e\xe6\x01\x5f\xe0\x98\xc4\x4f\x9c\x82\xe9\x0d\x9f\x96\xc1\x8c\x9e\xcd\x74\xc9\x9b\x6d\x9c\xdf\x90\x44\x25\x3c\x61\x2a\x60\x34\x07\x9e\x25\x3e\xef\x23\xed\x73\xee\x22\x57\x81\x2f\x53\x49\x7a\x56\xa1\x8b\xcc\x5f\x15\x3b\x11\xc2\xe0\xbc\x24\x7c\x37\x59\x6f\x51\x3e\x57\xff\xa7\xfa\x8d\x93\x48\x78\x3a\xdf\xa2\x5a\xa7\xaa\x7f\x2b\x16\x21\x3e\x73\xff\xc0\x85\x7e\xdf\xea\x78\xde\xd4\x43\xb9\x52\xbe\x30\x18\x2d\xfb\x62\x34\x7d\xd3\xfc\x82\xd1\xf2\x33\xff\x0e\x00\x00\xff\xff\x40\x24\xa4\x45\xe4\x03\x00\x00")

func dataLoginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataLoginHtml,
		"data/login.html",
	)
}

func dataLoginHtml() (*asset, error) {
	bytes, err := dataLoginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/login.html", size: 996, mode: os.FileMode(420), modTime: time.Unix(1480984338, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataNewHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x53\xc9\x6e\xdb\x30\x10\xbd\xe7\x2b\xa6\x3c\xd7\x61\x1b\xa4\x3e\xc8\x94\x80\xb6\x69\x7b\x09\x12\xc7\xce\xa5\xa7\x80\x96\xc6\x12\x51\x2e\x0a\x49\xd5\x36\x0c\xfd\x7b\x41\x52\xde\x0a\x07\x88\x2f\x12\x39\xcb\x7b\x6f\x16\xb2\x0f\x77\x8f\xdf\x9f\x7f\x4f\x7f\x40\xe3\x95\x2c\xae\x58\xfa\x01\x30\xe7\x37\x12\xc1\x6f\x5a\xcc\x89\xc7\xb5\xa7\xa5\x73\x24\x78\x00\x3a\x09\xdb\x78\x00\x90\xc2\xf9\x51\x0c\xcd\x40\x1b\x8d\x93\x68\xef\xe3\x57\xf2\x05\x1e\x22\x2b\xe1\x5a\xc9\x37\x19\x08\x2d\x85\xc6\xd1\x42\x9a\xf2\xcf\x64\x70\xae\x44\xe5\x9b\x0c\x6e\x3e\x7f\x6a\xd7\x3b\x5b\x20\x1d\x71\x29\x6a\x9d\x81\x15\x75\xe3\x0f\xd8\x8c\x46\xca\xa8\x73\x69\xac\x02\x85\xbe\x31\x55\x4e\xa6\x8f\xf3\x67\x02\xbc\xf4\xc2\xe8\x9c\x6c\xb7\xd7\xbf\xae\xa7\xd6\x94\xe8\xdc\x4f\x63\xd5\xbd\x29\xfb\x7e\xa8\x81\x09\xdd\x76\x7e\xa8\xaf\x11\x55\x85\x9a\x80\xe6\x0a\x87\xb4\x07\xa3\x4b\x0c\x49\x0f\x5c\x61\xdf\x13\xf8\xcb\x65\x97\x9c\x77\xc9\x19\x8c\xb4\x80\x77\xa1\xcd\xf0\xb5\x13\x16\xdd\xbd\xa9\x85\x3e\x83\xba\xe4\xd2\xe1\xbb\xe0\x5e\xed\x8b\xc3\xd2\xa2\x3f\x55\xf4\x34\x9b\x47\xeb\x25\xa2\xbe\xc6\x36\x9d\x51\xa3\x71\xf5\xd2\x39\xb4\x01\x2a\x21\x75\xb2\x18\xa6\xc2\xa4\xd8\x1d\xc3\x25\x8e\x78\x69\x6c\x4e\x02\x30\x29\x02\x52\x06\x8c\x46\xc7\x51\xe0\xb1\x94\x30\xd8\x9d\x90\x98\x05\x36\xb5\xa7\xa2\x7b\x16\x7a\xa0\x79\x93\xb1\xe5\xce\xad\x8c\xad\x48\x31\x1d\x4e\x97\x30\xef\xb3\x2f\x66\x2f\x9e\x66\x90\xba\x7d\x86\x4d\xd5\xd0\x60\xd8\xd6\x9c\xdc\x7c\x19\xb7\x6b\x92\x76\x7b\x7f\x73\xb6\xcc\x49\xc5\x3d\xcf\x84\xe2\x35\xd2\x56\xd7\x93\x05\x77\x38\xbe\xfd\x08\x27\x93\xfc\x36\xbe\xed\x7b\x42\x8b\xff\xc5\x0c\x1a\x76\xd4\x27\xf5\xb9\x6e\xa1\xc4\x61\x33\xe6\xe9\x7a\x8c\xc1\x68\x1a\x25\xa3\xe1\xdd\x14\x57\x8c\xa6\x07\xff\x2f\x00\x00\xff\xff\xe0\x04\xf0\x0a\x08\x04\x00\x00")

func dataNewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataNewHtml,
		"data/new.html",
	)
}

func dataNewHtml() (*asset, error) {
	bytes, err := dataNewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/new.html", size: 1032, mode: os.FileMode(420), modTime: time.Unix(1480982999, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPasswordsHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x54\xd1\x4e\xe3\x3a\x10\x7d\xe7\x2b\x86\x80\xc4\xbd\x12\x8d\x41\xe8\x3e\x10\xdc\x48\x15\xad\xd0\x45\xbb\x50\x69\x59\xed\xee\x13\x72\x63\xd3\x18\x5c\xdb\xb2\xdd\x6d\xab\x28\xff\xbe\xb2\x9d\xb4\x49\x29\xbb\xfb\x52\xd5\x67\xe6\x8c\x8f\x67\x4e\x06\x1f\x8f\x1f\x6f\x9f\x7e\x4c\x27\x50\xba\x85\xc8\x8f\xf0\xf1\x60\x00\x4f\x8f\xe3\x47\x60\x6b\xcd\x0d\x71\x5c\x49\x70\x0a\xb4\x51\x9a\x19\xb0\x1b\xe9\xc8\x1a\x06\x83\xfc\x08\x47\x02\x00\xb6\x6e\x23\x18\xb8\x8d\x66\xc3\xc4\xb1\xb5\x43\x85\xb5\x89\x8f\x00\xf0\xc5\x1c\xaa\xf0\x0f\xa0\x58\x1a\xab\x4c\x06\x5a\x71\xe9\x98\xb9\x09\x70\x1d\x7e\x1d\x99\x09\xb6\x4d\x9c\x29\x43\x99\x19\x14\x4a\x08\xa2\x2d\xcb\xa0\xfd\xd7\xa3\xd0\x73\x70\xe5\x1e\x27\x83\x4b\xbd\x06\xab\x04\xa7\x70\x72\x7d\x7d\x7d\xd3\x44\x35\xa1\x94\xcb\x79\x06\x17\xe9\x7f\x86\x2d\x5a\xd8\x8b\x1d\x10\xc1\xe7\x32\x03\xc1\x5e\x5c\xb7\xfe\x52\x6c\x6b\x0b\x6e\xdd\x20\x3c\x32\x03\xa9\x64\x4f\xc6\x89\x26\xd6\xae\x94\xa1\xcf\x85\x92\x8e\x70\xc9\xcc\x96\x47\xb9\xd5\x82\x6c\x32\x28\x39\xa5\x4c\xb6\xb7\xae\x38\x75\x65\x06\x17\x7a\xdd\x22\x25\xe3\xf3\xd2\x75\x20\x5f\x1b\xa3\x70\x65\xe8\x70\x79\x99\x4f\x9b\x7b\x2c\x46\xe5\x65\x04\xaf\x72\x4c\xa0\x34\xec\x65\x98\x54\x55\x7a\x97\x3e\xb0\x55\x9b\xf5\x49\x15\x75\x9d\xe4\x0f\x6c\x85\x11\xc9\x31\x2a\xaf\x02\x65\x19\x06\x56\x55\xa7\x73\xa1\x66\x44\x40\x36\x84\xf4\xae\xae\x03\x66\x88\x9c\x33\x38\x2d\x88\x3b\x87\x53\xbd\xb2\x21\x38\x4e\xc7\xf1\x11\x9f\x89\xae\xe3\x8b\xb1\xe0\x79\xa3\xdb\x4b\xa8\x2a\x4f\xa9\xeb\x70\x07\xb4\x81\x30\xd0\x36\xcd\x9f\x4b\xc3\x08\xcd\xb1\x33\x39\x76\x65\x3e\x56\x0b\xc2\x25\x46\xae\x0c\xc7\xaf\x96\x19\x78\x20\x0b\xb6\x45\x46\x85\x37\x9e\x8d\x67\xe4\x59\xa8\x29\xd1\xa9\x39\x53\x74\xb3\x3b\x77\xde\xa0\x57\xb6\x11\xbb\x4b\x36\x79\x0f\xf0\x10\xcd\xab\x2a\x8d\x52\xbc\x7e\x47\x3f\x48\xf1\xf2\xbc\xba\x8f\x93\xf6\x20\x00\xec\x8d\x5f\x08\x62\xed\x30\x29\x94\xde\x24\xf0\x2e\x05\xc0\x9a\xc2\x4f\xae\x19\x46\x7a\xab\xf4\xe6\xff\xc5\xbc\xae\x13\x50\xb2\x10\xbc\x78\x8b\xdc\xe9\xb7\x7f\xce\xaa\x2a\x7d\x52\x6f\x4c\xda\x90\x55\xd7\x67\xff\x26\xe8\xc0\xad\x3b\x3b\xb4\x45\x27\x94\xbb\x9e\x29\x76\x95\x7c\xc8\x9b\xe4\x80\xb2\xae\x7c\x46\xb9\x4b\xf6\xb5\x7a\x6e\xa3\xf5\x90\x0e\x44\x7e\xdf\x12\xca\x04\x73\xec\x6f\x9a\x32\x0e\x99\xfb\x6d\x89\xfc\x7e\x63\x62\xe6\xe1\xd6\xbc\x9f\x5b\x30\x15\xf4\xcc\xc3\x24\xed\xb8\x06\xa3\x9e\xbf\x30\xea\x58\x1a\xa3\xf8\x0d\xec\x38\x18\xc5\x4f\x0b\x73\xa9\x97\xae\xb3\x0b\x13\xe0\x74\x98\xbc\x5f\x12\x4d\xdf\xb0\x2d\x0c\xd7\x5d\x02\x7a\x25\x3f\x49\x44\xb7\x5d\x4f\xc7\xe9\xfd\x17\x3f\x2a\x8c\x62\xe4\xcf\xd4\x28\x74\x74\x3f\xfa\xfe\x3c\x99\xc2\x10\xe2\x86\x18\xbd\x92\xf5\x44\xd2\xb0\x81\xeb\x3a\x89\x5b\xa6\xa9\x88\x51\x5c\xe8\xbf\x02\x00\x00\xff\xff\x3a\xa2\x91\xfe\x12\x06\x00\x00")

func dataPasswordsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataPasswordsHtml,
		"data/passwords.html",
	)
}

func dataPasswordsHtml() (*asset, error) {
	bytes, err := dataPasswordsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/passwords.html", size: 1554, mode: os.FileMode(420), modTime: time.Unix(1483517734, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/.passwords.html.swp": dataPasswordsHtmlSwp,
	"data/edit_password.html": dataEdit_passwordHtml,
	"data/login.html": dataLoginHtml,
	"data/new.html": dataNewHtml,
	"data/passwords.html": dataPasswordsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		".passwords.html.swp": &bintree{dataPasswordsHtmlSwp, map[string]*bintree{}},
		"edit_password.html": &bintree{dataEdit_passwordHtml, map[string]*bintree{}},
		"login.html": &bintree{dataLoginHtml, map[string]*bintree{}},
		"new.html": &bintree{dataNewHtml, map[string]*bintree{}},
		"passwords.html": &bintree{dataPasswordsHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

