// Code generated by go-bindata.
// sources:
// data/.passwords.html.swp
// data/login.html
// data/new.html
// data/new_password.html
// data/passwords.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataPasswordsHtmlSwp = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9a\x3f\x8f\x1b\x45\x18\xc6\x9f\xd0\x21\xf6\x4f\x14\x24\x44\x39\x71\xae\x23\xf6\xfa\x38\x22\x38\x67\x6e\x25\x14\x9f\x4e\x91\xe0\x2e\x45\x02\x84\x06\xc6\xbb\x73\xde\x15\xe3\xdd\xd5\xcc\x9c\xce\xd6\x6a\xc9\x07\xa0\x4a\x07\x0d\x05\x12\x1d\x15\x7c\x00\x3a\x1a\xf8\x08\x14\x34\x54\x34\xf0\x0d\xd0\xec\x7a\x8f\xf8\x08\xc2\x14\x80\x22\xbd\xbf\x66\x66\x1e\xbf\xcf\xec\xe3\x77\xc6\x85\x65\xcf\xc6\xef\xdc\x7d\x9b\xbd\x3e\x7a\x0d\x00\xae\x02\x8f\x27\x1f\xbc\x57\x5f\x3d\xc6\x57\x01\x90\x0a\x25\xb1\x05\xa9\x9c\xe5\xa2\xf8\xfb\xba\x8f\xdd\x86\x91\x2a\x13\xa1\xa2\x79\x19\x19\x9d\x44\x1f\xc9\x95\xb1\xa5\x96\x51\x2a\xac\x88\x2a\x61\xcc\x79\xa9\x53\x33\xca\xec\x42\x6d\xf3\x68\x82\x20\xb6\xe1\xcc\x9e\x0e\xdf\xf0\xb1\xf7\xea\xee\xd8\x2d\x6f\x0c\xae\xb3\x17\xaf\x3d\xf8\xbf\x53\x11\x04\x41\x10\x04\x41\x10\x04\xf1\x1f\x62\xab\x2b\x78\x04\xe0\xb9\xf5\xfa\x95\xf5\x78\xe5\xd2\x48\x10\x04\x41\x10\x04\x41\x10\x04\x41\x10\xc4\xb3\x8b\x48\x81\xc5\x0b\xc0\x2d\xaf\xfb\xfd\xbf\xff\xfe\xff\x6b\x08\x7c\x17\x02\xdf\x86\xc0\x97\x21\xf0\x59\x08\x2c\x43\x40\x87\x80\x0c\x81\xa3\x10\x18\x87\xc0\xcb\x21\x70\x2d\x04\x9e\x0f\x81\xdf\x02\xe0\x97\x00\xf8\x29\x00\xbe\x0f\x80\x4f\x03\xe0\x71\x00\x34\x01\xf0\x61\x00\xbc\x1b\x00\x71\x00\x8c\x03\xe0\x47\x1f\xf8\xc1\x07\xbe\xf1\x81\x2f\x7c\xe0\x91\x0f\xbc\xef\x03\x47\x3e\xf0\x92\x0f\xfc\xec\x01\x5f\x7b\xc0\xe7\x1e\xf0\x89\x07\xac\x3c\x20\xf3\x80\x87\x1e\x70\xe2\x01\x87\x1e\x70\xe0\xad\x73\x13\x04\x41\x10\x04\x41\x10\x04\xf1\xef\xc1\xa3\xcc\x2e\x54\x0c\xc6\x78\x74\xd6\x8e\x75\x2d\x8b\xb4\x69\xc0\x98\xd3\x54\x1e\xb7\x33\x37\xb7\x62\xa6\x64\xbf\x6c\x85\x59\x99\xae\xfe\x10\x36\xbd\x4f\x94\xe9\x98\x6d\x48\xad\x98\xc6\x97\x34\xc6\x78\xbe\x98\x33\xa3\x93\x83\x41\x5d\xef\xcc\x55\x39\x13\x6a\x34\x95\x4a\x5a\x79\x77\x31\x6f\x9a\x41\xb4\x9d\xe5\x30\xcd\xed\x3f\x32\xdc\x29\xab\xd5\x5f\x18\xf8\x9f\x73\x3a\xa9\xae\x47\x0f\x8c\xd4\xc7\x62\x21\x9b\xe6\x69\x6f\x66\x5d\x34\x2d\x17\x22\x2f\x9e\x56\xc2\xad\xde\xec\x9c\x16\xc5\x5c\xb2\x9d\xea\xdc\x3c\xd1\x40\x7e\xa9\xc5\xdc\x66\x5a\x8a\x34\x76\x6e\x6e\xb3\xb8\xdb\x9f\x47\x36\x6b\x97\x2e\x13\x73\xa1\x2e\x94\x37\x13\x9b\x97\x85\xe9\xd6\xee\x24\xdc\xac\xdd\xa2\x3f\xd6\x8d\x53\xe5\xd9\x5e\x5c\xd7\x3b\x89\xb0\x2e\x73\xb6\xb7\x3e\x38\xde\x5d\x83\x8b\x90\x89\xb0\x37\xdb\xa8\x6c\x72\xc0\x46\xd3\x36\xf0\x45\x3b\x5b\xed\xa8\xd5\x78\x77\xa5\xdc\xae\x5c\xb0\x4c\xcb\x53\xd7\xf6\xd1\xd1\xe8\x58\x9e\xdf\x5b\xff\x43\xfc\xad\x32\x69\x9a\x41\x7c\x2c\xcf\x79\x24\xe2\xf6\xa1\xad\x65\x37\xee\x2b\x0c\x8f\xb2\xdd\xee\x8a\x1a\xbb\xea\xc3\xf6\x4d\x52\xb9\xb1\xc3\x56\x9f\xb0\xa2\x2c\xe4\xed\x56\x3f\x53\xac\xde\x28\xb3\x72\x69\x87\x42\xe5\xf3\x62\xc2\x94\x3c\xb5\xb7\xd7\x7a\x25\xd2\x34\x2f\xe6\x13\x36\x1e\xdd\xd2\x72\xd1\xcb\xb3\x52\xa7\x52\x4f\xd8\x6e\xb5\x64\xa6\x54\x79\xca\x6e\xec\xef\xef\x77\xaf\xda\xf4\x26\xb3\xd9\xa5\xfd\x3b\xc3\x30\x29\x95\x12\x95\x91\x13\xd6\xcf\xd6\x1e\xd7\xe5\xd6\xc2\xdb\xac\xcc\xae\x2a\x79\x30\x70\xa9\xa2\xc4\x98\x41\x0c\xde\x7d\x10\xf9\xf5\xe1\x90\xdd\x3f\x99\x9e\x30\xb9\xac\x72\x2d\xdc\xf1\x31\x5b\xb2\x4a\x97\x95\xd4\xcc\xac\x0a\x2b\x96\x6c\x38\x74\x95\xd3\x93\x3b\xf7\x1f\xde\x3b\x64\x9d\xf3\xf7\x00\x00\x00\xff\xff\xc8\xa3\xd9\xc4\x00\x30\x00\x00")

func dataPasswordsHtmlSwpBytes() ([]byte, error) {
	return bindataRead(
		_dataPasswordsHtmlSwp,
		"data/.passwords.html.swp",
	)
}

func dataPasswordsHtmlSwp() (*asset, error) {
	bytes, err := dataPasswordsHtmlSwpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/.passwords.html.swp", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1482636235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataLoginHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x93\xcd\x6e\xdc\x20\x10\xc7\xef\x79\x8a\x29\xf7\x0d\xdd\xe6\xe6\xb0\x48\x55\xd2\xf6\x12\x6d\x56\x4d\x7a\xe8\x91\x35\xe3\x05\x15\x83\x0b\xb8\xce\x6a\xe5\x77\xaf\x00\x7b\x9d\x4a\xa9\x9a\xf4\x82\x87\xf9\xf8\xfd\x67\x3c\x36\x7b\x77\x7b\x7f\xf3\xf8\x7d\xf7\x09\x54\x6c\x0d\xbf\x60\xe5\x01\xc0\x42\x3c\x1a\x84\x78\xec\x70\x43\x22\x3e\x45\x5a\x87\x40\x52\x04\xa0\x37\x70\xca\x06\x80\xd1\x21\xae\x72\x6a\x05\xd6\x59\xbc\xce\xfe\x31\x9f\x46\xec\x71\xc9\x94\x3a\x74\x46\x1c\x2b\xd0\xd6\x68\x8b\xab\xbd\x71\xf5\x8f\xeb\x29\x38\x68\x19\x55\x05\x1f\xd6\xef\xbb\xa7\xd9\x97\x44\x57\xc2\xe8\x83\xad\xc0\xeb\x83\x8a\x0b\x9b\xd1\x2c\x99\xfb\x54\x6b\x7e\xe7\x0e\xda\x32\xaa\xd6\xc5\x71\xc5\x99\x00\xe5\xb1\xd9\x90\xd3\xe9\xf2\xcb\xe5\x16\x87\x6f\x01\xfd\x9d\xab\xc7\x91\xf0\x2d\x0e\x8c\x0a\xce\xa8\xba\xca\xe9\x8d\xf3\x2d\xb4\x18\x95\x93\x1b\xb2\xbb\x7f\x78\x24\x20\xea\xa8\x9d\x9d\xaa\x77\xde\xd5\x18\xc2\x67\xe7\xdb\x89\x90\xdb\x60\xda\x76\x7d\x9c\xde\x8f\xd2\x52\xa2\x25\x60\x45\x8b\xb3\xa8\xb3\x35\xa6\xa2\xad\x68\x71\x1c\x09\xfc\x12\xa6\x2f\xc1\xdb\x12\x4c\x4e\xca\xe1\x55\xb4\xaf\xf8\xb3\xd7\x1e\x43\x9e\xf4\x05\x6a\x23\x4c\xc0\xd7\xe3\x3e\xe6\x01\x5f\xe0\x98\xc4\x4f\x9c\x82\xe9\x0d\x9f\x96\xc1\x8c\x9e\xcd\x74\xc9\x9b\x6d\x9c\xdf\x90\x44\x25\x3c\x61\x2a\x60\x34\x07\x9e\x25\x3e\xef\x23\xed\x73\xee\x22\x57\x81\x2f\x53\x49\x7a\x56\xa1\x8b\xcc\x5f\x15\x3b\x11\xc2\xe0\xbc\x24\x7c\x37\x59\x6f\x51\x3e\x57\xff\xa7\xfa\x8d\x93\x48\x78\x3a\xdf\xa2\x5a\xa7\xaa\x7f\x2b\x16\x21\x3e\x73\xff\xc0\x85\x7e\xdf\xea\x78\xde\xd4\x43\xb9\x52\xbe\x30\x18\x2d\xfb\x62\x34\x7d\xd3\xfc\x82\xd1\xf2\x33\xff\x0e\x00\x00\xff\xff\x40\x24\xa4\x45\xe4\x03\x00\x00")

func dataLoginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataLoginHtml,
		"data/login.html",
	)
}

func dataLoginHtml() (*asset, error) {
	bytes, err := dataLoginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/login.html", size: 996, mode: os.FileMode(420), modTime: time.Unix(1480984338, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataNewHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x53\xc9\x6e\xdb\x30\x10\xbd\xe7\x2b\xa6\x3c\xd7\x61\x1b\xa4\x3e\xc8\x94\x80\xb6\x69\x7b\x09\x12\xc7\xce\xa5\xa7\x80\x96\xc6\x12\x51\x2e\x0a\x49\xd5\x36\x0c\xfd\x7b\x41\x52\xde\x0a\x07\x88\x2f\x12\x39\xcb\x7b\x6f\x16\xb2\x0f\x77\x8f\xdf\x9f\x7f\x4f\x7f\x40\xe3\x95\x2c\xae\x58\xfa\x01\x30\xe7\x37\x12\xc1\x6f\x5a\xcc\x89\xc7\xb5\xa7\xa5\x73\x24\x78\x00\x3a\x09\xdb\x78\x00\x90\xc2\xf9\x51\x0c\xcd\x40\x1b\x8d\x93\x68\xef\xe3\x57\xf2\x05\x1e\x22\x2b\xe1\x5a\xc9\x37\x19\x08\x2d\x85\xc6\xd1\x42\x9a\xf2\xcf\x64\x70\xae\x44\xe5\x9b\x0c\x6e\x3e\x7f\x6a\xd7\x3b\x5b\x20\x1d\x71\x29\x6a\x9d\x81\x15\x75\xe3\x0f\xd8\x8c\x46\xca\xa8\x73\x69\xac\x02\x85\xbe\x31\x55\x4e\xa6\x8f\xf3\x67\x02\xbc\xf4\xc2\xe8\x9c\x6c\xb7\xd7\xbf\xae\xa7\xd6\x94\xe8\xdc\x4f\x63\xd5\xbd\x29\xfb\x7e\xa8\x81\x09\xdd\x76\x7e\xa8\xaf\x11\x55\x85\x9a\x80\xe6\x0a\x87\xb4\x07\xa3\x4b\x0c\x49\x0f\x5c\x61\xdf\x13\xf8\xcb\x65\x97\x9c\x77\xc9\x19\x8c\xb4\x80\x77\xa1\xcd\xf0\xb5\x13\x16\xdd\xbd\xa9\x85\x3e\x83\xba\xe4\xd2\xe1\xbb\xe0\x5e\xed\x8b\xc3\xd2\xa2\x3f\x55\xf4\x34\x9b\x47\xeb\x25\xa2\xbe\xc6\x36\x9d\x51\xa3\x71\xf5\xd2\x39\xb4\x01\x2a\x21\x75\xb2\x18\xa6\xc2\xa4\xd8\x1d\xc3\x25\x8e\x78\x69\x6c\x4e\x02\x30\x29\x02\x52\x06\x8c\x46\xc7\x51\xe0\xb1\x94\x30\xd8\x9d\x90\x98\x05\x36\xb5\xa7\xa2\x7b\x16\x7a\xa0\x79\x93\xb1\xe5\xce\xad\x8c\xad\x48\x31\x1d\x4e\x97\x30\xef\xb3\x2f\x66\x2f\x9e\x66\x90\xba\x7d\x86\x4d\xd5\xd0\x60\xd8\xd6\x9c\xdc\x7c\x19\xb7\x6b\x92\x76\x7b\x7f\x73\xb6\xcc\x49\xc5\x3d\xcf\x84\xe2\x35\xd2\x56\xd7\x93\x05\x77\x38\xbe\xfd\x08\x27\x93\xfc\x36\xbe\xed\x7b\x42\x8b\xff\xc5\x0c\x1a\x76\xd4\x27\xf5\xb9\x6e\xa1\xc4\x61\x33\xe6\xe9\x7a\x8c\xc1\x68\x1a\x25\xa3\xe1\xdd\x14\x57\x8c\xa6\x07\xff\x2f\x00\x00\xff\xff\xe0\x04\xf0\x0a\x08\x04\x00\x00")

func dataNewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataNewHtml,
		"data/new.html",
	)
}

func dataNewHtml() (*asset, error) {
	bytes, err := dataNewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/new.html", size: 1032, mode: os.FileMode(420), modTime: time.Unix(1480982999, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataNew_passwordHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x55\x51\x8f\xa3\x36\x10\x7e\xdf\x5f\x31\xeb\xe7\x02\x9b\x4a\x7d\xc9\x19\xa4\x6a\xb9\xf6\xe5\x2e\x89\xba\xd9\x4a\x79\x3a\x39\x30\x09\xee\x19\x9b\xda\x26\x24\x42\xfc\xf7\xca\x60\x42\xa2\xcb\xf6\x92\x97\xc4\x30\x33\xdf\x37\xf3\xcd\x78\xa0\xcf\xe9\xf2\x75\xbd\x59\x7d\x86\xc2\x96\x22\x79\xa2\xcf\x41\xb0\x5e\xa6\xcb\xfe\x11\xd0\x64\xac\xe2\x72\x1f\x04\xc9\x13\x1d\x1c\x00\xa8\xb1\x27\x81\x60\x4f\x15\xc6\xc4\xe2\xd1\x46\x99\x31\xc4\x59\x00\x6a\x01\x6d\x7f\x00\x10\xdc\xd8\xa0\x77\x9d\x83\x54\x12\x3f\xf5\xef\xbb\xfe\x57\xb0\x2d\x4e\x9e\x39\x37\x95\x60\xa7\x39\x70\x29\xb8\xc4\x60\x2b\x54\xf6\xfd\x93\x37\x36\x3c\xb7\xc5\x1c\x7e\x9d\xbd\x54\xc7\xf1\x9d\x23\x0d\x98\xe0\x7b\x39\x07\xcd\xf7\x85\x9d\xb0\x69\xd4\x53\xf6\x79\x16\xb3\xe4\xbd\xca\x99\xc5\x68\x81\x0d\xac\x98\x31\x8d\xd2\x39\x8d\x8a\x59\x6f\x7e\x0e\x02\x3c\x56\x5c\xa3\x01\x94\x16\xb5\x01\x66\x40\xa8\x8c\x89\x5f\x20\x53\xf2\x80\xda\x1a\xb0\x0a\xde\xd7\xaf\xc0\x25\xd8\x02\x21\xdf\x82\x93\x02\x80\xee\x94\x2e\xa1\x44\x5b\xa8\x3c\x26\xab\xe5\xdb\x9a\x00\xcb\x2c\x57\x32\x26\x6d\x1b\xfe\x19\xae\xb4\xca\xd0\x98\x3f\x94\x2e\xbf\xa8\xac\xeb\xbc\x3e\x94\xcb\xaa\xb6\x5e\xbb\x82\xe7\x39\x4a\x02\x92\x95\xe8\xc3\x16\x4a\x66\xe8\x82\x16\xac\xc4\xae\x23\x70\x60\xa2\x1e\x8c\xe9\x60\x74\x2f\xa3\x04\xee\x42\xfb\x0b\xff\xad\x5d\x7d\x5f\xd4\x9e\xcb\x1b\xa8\x56\xd7\x78\x3f\xda\xef\x7d\x7d\x37\x60\x24\x36\xdf\x2a\xaf\xae\x83\x1b\xd0\x6a\x91\xf8\x76\x51\xc1\xc7\xa3\x7b\xe8\x7b\xbf\x53\x3a\x26\xb5\x41\xfd\xcd\x31\x90\xe4\xdd\xa0\x06\x87\x3b\x07\x1a\xf5\x2e\x17\x21\x97\x89\xb9\xde\x8f\x69\x4d\xf1\x57\x3a\x39\xac\x31\x45\x3d\x48\x90\x47\xe7\x64\xa2\x29\x9b\xeb\xc4\xc6\xc9\x67\xff\xb0\x23\x18\x5b\xef\x76\xae\xfb\x55\x2d\x04\x8c\xd5\x41\x53\xa0\x84\x1c\x8d\x83\x0c\xc3\x70\x18\x86\x1f\x0b\x3b\xab\x91\x8c\x53\xf7\x48\x59\x93\x96\x0f\x64\x7f\xc1\x9e\xab\x92\x71\x49\x92\xb4\xff\x7f\x84\xd9\x47\x5e\xa9\x39\xa0\x74\x1d\x79\x2c\x09\xa9\x2c\x1a\x92\x2c\xdc\xdf\xad\x14\x1c\x2d\xd3\xc8\x3c\xf3\xe0\x0e\x5a\x35\x26\x26\xb3\x17\x02\x99\x12\x26\x26\xbf\xbd\x90\xc4\xcf\xbe\x45\xd3\x75\x34\x1a\xe3\xee\xef\x67\xa5\xd5\x96\x6d\xc5\x09\x0a\x76\x40\xd7\xd2\x46\x73\x8b\xc0\xc0\xad\x06\xa8\x78\xf6\x1d\x35\x28\x0d\x46\xb9\xfb\xec\xb7\xdd\xad\x92\xfc\xb6\x20\xc9\x67\x77\x60\xee\x36\x40\xca\xec\x4f\x47\xd6\xf1\x8c\x0a\x8f\x18\x50\x09\x96\x61\xa1\x44\x8e\x3a\x26\x9b\xcd\x66\x13\x7c\xfd\x1a\xa4\xe9\x3d\x2a\x8f\x85\xe5\xdc\xb0\xad\x40\xe0\x3b\x90\xd8\x80\xaa\xfa\x8c\xb8\x01\xa9\x2c\x18\x14\x98\x59\xcc\x3f\x2a\xc6\x5d\xda\x8c\x59\xdc\x2b\x7d\x22\x89\x5b\x90\xaf\xfe\xe9\x91\x81\xb9\x42\x79\x6c\x40\x26\xf2\xff\x23\x1e\xca\xf0\x6c\x53\xc8\xd9\x01\x80\xfa\xba\xfd\xcc\xbe\x5c\x17\x43\xa3\xc1\x7c\x19\xd1\xb6\x9a\xc9\x3d\x42\x98\x86\xde\x8d\xbb\xd9\xfa\x18\xb3\x6d\xc3\xbf\xdd\xc9\x2d\x94\xb6\xe5\x3b\x08\xdf\xbc\xba\x5d\x37\xea\x1c\x93\xf1\x44\xda\x16\x65\xde\x75\x97\x94\x8e\x34\x80\x91\xee\x04\xc1\x35\xdd\xcd\x24\x7b\x90\x49\x89\x68\xc0\xff\x51\x63\x1a\x8d\xab\xf6\xaa\x4d\xa6\xde\x96\xdc\x9e\xef\xf2\x1b\x3b\xa0\x5f\xce\x34\x72\x5f\xaf\xe4\x89\x46\xc3\x27\xfd\xbf\x00\x00\x00\xff\xff\x01\xb6\xb8\x85\x04\x08\x00\x00")

func dataNew_passwordHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataNew_passwordHtml,
		"data/new_password.html",
	)
}

func dataNew_passwordHtml() (*asset, error) {
	bytes, err := dataNew_passwordHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/new_password.html", size: 2052, mode: os.FileMode(420), modTime: time.Unix(1482622638, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPasswordsHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x53\xc1\x6a\xe3\x30\x10\xbd\xf7\x2b\xa6\xd9\x1c\x6b\x6b\x43\xd9\x43\x5c\x45\xb0\x34\xa5\x2c\x2c\x49\x0f\xdd\xc3\x1e\x15\x6b\x6a\x0b\x64\x4b\x48\x2a\x89\x31\xfa\xf7\x45\xb2\xdd\x38\x5d\x02\xbb\x37\xcd\x9b\xf7\xc6\xcf\x6f\x24\x7a\xbb\xdd\x3f\xbe\xfe\x7e\x79\x82\xda\x37\x8a\xdd\xd0\xdb\x2c\x83\xd7\xfd\x76\x0f\x78\x32\xd2\x72\x2f\x75\x0b\x5e\x83\xb1\xda\xa0\x05\xd7\xb5\x9e\x9f\x20\xcb\xd8\x0d\x1d\x04\x00\xd4\xf9\x4e\x21\xf8\xce\xe0\x66\xe1\xf1\xe4\x49\xe9\xdc\x22\x76\x00\x3c\x3f\x28\x84\x3e\x9d\x01\x0e\xda\x0a\xb4\x59\xa9\x95\xe2\xc6\x61\x01\xd3\xe9\x21\x11\xc2\x20\x11\x77\xe0\xeb\x4f\x9a\x02\x56\xe6\x04\x4e\x2b\x29\xe0\xcb\x7a\xbd\x7e\x18\xbb\x86\x0b\x21\xdb\xaa\x80\xaf\xf9\x37\x8b\xcd\x04\x47\x17\x19\x57\xb2\x6a\x0b\x50\xf8\xe6\xe7\xf3\xdf\xd5\xc7\x6c\x25\x9d\xcf\x92\xfb\x02\x5a\xdd\xce\x6c\x50\x92\xe0\xf4\x7b\xf5\x8a\xbd\x70\xe7\x8e\xda\x0a\x47\x49\xbd\x1a\xc0\x7b\x46\x39\xd4\x16\xdf\x36\x8b\xbe\xcf\x9f\xf3\x1d\x1e\x27\xd6\x4f\x5d\x86\xb0\x60\x3b\x3c\x52\xc2\x19\x25\xf5\x7d\x92\xbc\xa7\xb4\xfa\x7e\x59\x29\x7d\xe0\x0a\x8a\x0d\xe4\xcf\x21\x24\xcc\xf2\xb6\x42\x58\x96\xdc\xdf\xc1\xd2\x1c\x5d\x6a\x6e\xc3\xe0\x98\x2a\xc9\x46\xc7\xf1\xbb\x7d\x1f\x79\x21\xa4\xc1\x30\x35\x52\xd2\x13\x2d\xd6\xb5\x45\x2e\x18\xf5\x96\x51\x5f\xb3\xad\x6e\xb8\x6c\x29\xf1\x75\x2a\x7f\x39\xb4\xb0\xe3\x0d\x7e\x20\xdf\xcb\xb8\x6a\x37\xd4\x24\xaa\xc8\x38\x62\x36\xf3\xa0\x45\x77\xae\x67\xc6\xcd\xd1\x8d\x66\xcf\x64\xcb\x2e\x80\x08\x09\xd6\xf7\xf9\x60\x25\xfa\xf7\xe2\x0a\x25\xda\x8b\xee\xae\x93\x3e\x41\x00\x54\x36\x15\x38\x5b\xc6\x75\x8c\x09\xe7\x8f\xda\x74\x3f\x9a\x2a\x84\x05\xf9\x37\xc1\x93\x90\xfe\xbf\x04\x5b\x54\xe8\xf1\x8a\xe4\x6f\xef\x29\x58\xb8\x08\x10\x5b\x31\x4b\x8e\x92\x8b\x8c\x29\x99\xad\x95\x92\xe1\x1e\x9c\x35\x94\xc4\x3b\x45\xc9\xf0\x12\xff\x04\x00\x00\xff\xff\xa3\x26\xec\xf1\xcb\x03\x00\x00")

func dataPasswordsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataPasswordsHtml,
		"data/passwords.html",
	)
}

func dataPasswordsHtml() (*asset, error) {
	bytes, err := dataPasswordsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/passwords.html", size: 971, mode: os.FileMode(420), modTime: time.Unix(1482636235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/.passwords.html.swp": dataPasswordsHtmlSwp,
	"data/login.html": dataLoginHtml,
	"data/new.html": dataNewHtml,
	"data/new_password.html": dataNew_passwordHtml,
	"data/passwords.html": dataPasswordsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		".passwords.html.swp": &bintree{dataPasswordsHtmlSwp, map[string]*bintree{}},
		"login.html": &bintree{dataLoginHtml, map[string]*bintree{}},
		"new.html": &bintree{dataNewHtml, map[string]*bintree{}},
		"new_password.html": &bintree{dataNew_passwordHtml, map[string]*bintree{}},
		"passwords.html": &bintree{dataPasswordsHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

