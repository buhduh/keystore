// Code generated by go-bindata.
// sources:
// data/.edit_password.html.swp
// data/.passwords.html.swp
// data/edit_password.html
// data/login.html
// data/new.html
// data/passwords.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataEdit_passwordHtmlSwp = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9a\x4d\x68\x24\xc5\x1b\xc6\x9f\xdd\xcb\x7f\x32\x1f\xdb\xcb\xdf\x93\xb7\x4a\xef\xc1\x53\x4f\x4f\xe2\xd7\x12\x7b\x46\x64\x67\x95\xc5\xcd\x87\x26\x59\xcd\x5e\x42\x4d\x77\x65\xa6\x48\x4f\xd7\xa4\xab\x26\x93\x30\xb4\x82\x7a\xf6\x20\xde\xf4\x26\x88\x07\x41\x0f\x8a\xe0\xc7\x4d\xf0\x22\x88\x1e\x3c\x7b\xdb\xab\x08\x5e\x17\xa9\xfe\x48\x66\xb2\x19\x93\x40\x50\x84\xfa\x5d\xba\xba\xea\xad\xa7\x9e\x7a\xab\x78\x9b\x90\xe9\x34\xee\xdd\x59\x26\xcf\xd6\x9f\x02\x80\xeb\xc0\x77\xf7\x77\x5f\xff\xe2\xfa\x0a\xbe\x9a\x07\x02\x1a\x32\x9c\x83\x80\x75\x38\x8d\xce\x8e\x7b\x43\x0b\xba\xa1\xf0\x69\xe8\x76\x85\x2b\x63\xdf\xdd\x65\x87\x52\x89\x98\xb9\x01\x55\xd4\x65\x01\x57\xdb\x03\x2a\xe5\x48\xc4\x41\xbd\xa7\xfa\xe1\x79\x96\x37\x18\x0c\x67\x31\x54\x3b\xce\xcd\x1a\x9e\x5c\x5c\x68\xe8\xd7\x1b\xf6\x3c\x79\xec\xff\x9b\xff\xb6\x2b\x83\xc1\x60\x30\x18\x0c\x06\x83\xc1\xf0\x0f\xa2\x06\x57\xf0\x26\x80\xab\xf9\xbb\x97\x3f\xaf\x9c\x78\x1a\x0c\x06\x83\xc1\x60\x30\x18\x0c\x06\x83\xc1\x60\xf8\xef\x42\x03\xe0\xe5\xff\x01\xaf\x95\xb2\xff\xff\x17\x7f\xff\xff\x6e\x01\xbf\x5a\xc0\x4f\x16\xf0\xa5\x05\x7c\x6a\x01\xef\x5b\xc0\xbb\x16\xf0\x96\x05\x30\x0b\x78\xc5\x02\x6e\x5a\xc0\xa2\x05\x3c\x61\x01\x25\x0b\xf8\xe5\x1a\xf0\xce\x35\xe0\x99\x6b\xc0\x83\x1a\xf0\x59\x0d\xf8\xb8\x06\x7c\x50\x03\x7a\x35\xe0\xf1\x1a\x50\xab\x01\x57\x6b\xc0\xcf\x55\xe0\xed\x2a\x30\xaa\x02\x61\x15\x78\xbe\x0a\x3c\xac\x00\x7f\x54\x80\x07\x15\xe0\xdb\x0a\xb0\x57\x01\x58\x05\xb8\x5f\x01\x6e\x54\x80\x1f\xca\xc0\x37\x65\xe0\xf3\x32\xb0\x5f\x06\x9a\x65\xa0\x5a\x06\x50\x06\xfe\x9c\x03\xbe\x9f\x03\x3e\x9a\x03\xf6\xe6\x80\xd5\x39\xe0\x61\x09\xf8\xad\x04\xfc\x58\x02\xbe\x2e\x01\x9f\x94\x80\x0f\x4b\xc0\x7b\x25\x80\x97\x80\xed\x52\xbe\x77\x83\xc1\x60\x30\x18\x0c\xe7\xc6\x73\x7b\xaa\x1f\xb6\x40\x88\xe7\xee\x88\xb8\xdf\x02\xd1\x5d\xa7\x74\x13\x42\x3c\x1e\x0d\x86\x8a\xa8\xc3\x01\x6b\xda\x72\xd8\xe9\x73\x65\x93\x7d\x1a\x0e\x59\xd3\x5e\xa7\xfb\xcc\x26\x6e\x1e\xe8\x0e\xc3\xac\xa5\xdb\x21\x2f\xda\xfa\x4d\xb2\x90\xf9\xea\xb8\x87\x90\xf1\x98\x45\x41\x92\x4c\xf4\x78\xae\x18\x28\x2e\xa2\xc9\x28\x1d\xe7\x90\xfa\x2d\xaa\x58\x57\xc4\x87\xc4\x99\x9e\x91\x4d\x28\xdc\x8c\xc7\xf5\x7b\xba\x95\x24\xf6\x78\xcc\x77\x48\x7d\x3d\x5d\x95\x05\x49\x42\x64\xde\x6c\xda\x45\xcb\xce\x1d\x4c\x9b\x8a\x69\xd4\x65\xa4\xde\x2e\x96\xe4\x4c\xfe\xdd\x92\x0d\xbb\xb5\xc2\x46\xa4\xf0\xf7\xe8\x16\xbc\x6c\x39\x12\xd1\x3e\x6b\xda\x7e\x1e\x67\x4f\x04\x84\xb4\xc3\x42\xb2\x23\xe2\xc9\xe1\x42\x70\x49\x67\x52\x07\x1c\x25\xf6\x38\xaf\x27\x72\x3c\x79\x4c\x8a\x1d\x28\x3b\x5f\x33\x62\xa3\xed\x23\x61\xf7\xf4\x85\xa7\x62\xa6\x76\xf4\x88\x01\x42\xbc\x79\xc7\xd9\x58\x6d\xaf\x92\x80\x4b\xda\x09\x19\xe1\x3b\x24\x62\x23\x92\x67\x86\x4b\x12\x09\x75\x94\x70\xc7\xb9\x98\xf5\x80\x2a\x56\x58\x67\x07\x03\x1e\x33\x69\x4f\x1c\x70\xbb\x7e\x3b\xeb\x4c\x12\x9b\x0c\x42\xea\xb3\x9e\x08\x03\x16\x37\xed\xad\xad\xad\x2d\x67\x79\xd9\x69\xb7\x67\xed\xb2\x90\x6b\xa5\x12\x34\x75\xdb\xa6\x8a\x5d\x20\xc9\x3a\xb1\x34\x66\xb4\xc8\xad\x50\xda\x5e\x2c\x46\xb2\x69\x2f\x34\x6c\xe2\x8b\x50\x36\xed\xa7\x1b\x76\x2b\xf5\xba\xa2\xc7\x93\xc4\x73\x8b\x79\x33\xd2\x9f\xca\xb4\xd2\xe8\x4b\x38\xf1\x40\xf4\x29\x8f\xa6\xb3\xd6\x4e\xfb\x92\x64\x56\x6e\xf2\x39\xad\x2c\xee\x12\x4c\x14\xbf\x08\x9e\xb6\xb1\x96\xf7\xea\xd3\x8b\xd9\xde\x90\xc7\x2c\x98\xe1\xe8\x48\xa0\x55\x4c\xba\x04\x57\x43\xc9\xe2\x6d\xdd\x9c\xb6\xb5\x29\x59\xbc\x42\xfb\xec\x1c\xb6\x8e\x15\x5a\x7a\x16\xd1\xd3\x66\x1b\xf3\x8a\x92\x38\xe5\xa8\xc7\x83\x80\x45\x85\x27\x7e\x22\x47\x77\xda\xda\x86\x7b\xe6\xbc\xf1\xb8\xfe\x52\xfd\x05\x5f\x5f\xe3\x17\x45\xdc\x2f\xfc\x4f\x4a\x65\xa3\x17\x90\x7b\x35\xdb\xbc\xbc\x2b\xba\xfc\x34\x55\x15\x0f\xd3\x82\x4f\xce\xa5\xb6\x22\x22\x9f\xcd\xf2\x96\x0e\x66\xd6\xb4\x9a\xa7\xbf\x38\xa4\xcf\x54\x4f\x04\x4d\x7b\x6d\x75\x7d\xc3\x26\x34\xb5\x9f\x8b\xad\xc5\xc2\x67\x52\x6a\xb9\xbb\xc2\x4f\x92\xb4\x86\x7a\xbd\x85\xd6\xe6\x40\xd7\x0c\x57\x57\xad\xe2\xa6\x78\x6e\x6f\x21\xfb\x8e\x49\x75\x18\xb2\x6c\xef\x45\x19\xd7\xf7\xc1\xa1\x21\xef\x46\x4b\x24\xe6\xdd\x9e\x7a\x2e\x1f\x18\xf1\x40\xf5\x96\xc8\xe2\x42\x63\x70\x50\xf4\x05\x5c\x0e\x42\x7a\xb8\x44\x78\x14\xf2\x88\x39\x9d\x50\xf8\xbb\xd9\x60\x76\x29\xc6\x53\xda\x21\x97\xca\x49\xd7\x5c\x22\x91\x88\x58\x16\x39\xcc\xc2\xbc\x74\x60\xe2\x56\xba\xbe\x94\x76\x0b\x5e\xf6\xd9\x3d\xaa\xab\xfa\x95\x30\xe9\xd3\x01\x8f\xba\xba\x7e\x7a\xf3\xed\xd5\x5b\x1b\x5b\x6b\xb7\x49\x16\xf9\x57\x00\x00\x00\xff\xff\xb0\x71\x11\x26\x00\x30\x00\x00")

func dataEdit_passwordHtmlSwpBytes() ([]byte, error) {
	return bindataRead(
		_dataEdit_passwordHtmlSwp,
		"data/.edit_password.html.swp",
	)
}

func dataEdit_passwordHtmlSwp() (*asset, error) {
	bytes, err := dataEdit_passwordHtmlSwpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/.edit_password.html.swp", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1483430597, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPasswordsHtmlSwp = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9a\x41\x6b\x24\x45\x14\xc7\xff\x2b\x5e\xb4\x33\xdd\x8b\x82\x7b\xf0\x52\x3b\xc9\x41\x21\xd3\x9d\x98\x15\xcd\xa4\xd3\x22\x3b\x4b\x88\xba\x49\xc4\x8d\x9a\x93\xd4\x74\x57\xa6\x9b\xd4\x74\x35\x55\x15\x92\xa1\xe9\x55\xd0\xaf\xe0\x41\xbc\x2a\xe8\xc9\x83\x07\x11\x04\x2f\xe2\xc1\x8f\xe1\xd5\x8b\x7e\x00\x41\xaa\x7b\x3a\x26\x33\xa3\xe6\xb4\x8b\x50\xbf\xcb\x54\xfd\xfb\xff\xaa\xde\xab\x7a\xd3\x10\x32\xc3\xb5\x77\x77\xef\x93\x57\xfc\x3b\x00\x70\x13\xb8\x73\x74\xf2\xfe\xb7\x37\xf7\xf0\xdd\x6d\x20\xa1\x9c\xe1\x1a\x24\x6c\x98\xd1\xfc\xbf\x7d\x0f\xcd\x82\x01\x17\x31\xe5\xc1\x48\x04\x4a\xc6\xc1\x09\x9b\x28\x2d\x24\x0b\x12\xaa\x69\x50\x50\xa5\xce\x84\x4c\x94\x9f\xea\x31\xbf\xce\xd6\x16\x8b\xe5\x3a\x9c\xea\xe3\xde\xab\x1d\x6c\xbc\xb4\xbe\x66\xa6\xcb\xdd\xdb\xe4\xd9\x67\x0e\x1f\x77\x56\x16\x8b\xc5\x62\xb1\x58\x2c\x16\x8b\xe5\x11\xa2\x8b\x1b\xf8\x10\xc0\x13\xd3\xf9\xfa\xf4\xf3\xc6\xcc\xa7\xc5\x62\xb1\x58\x2c\x16\x8b\xc5\x62\xb1\x58\x2c\x96\xff\x2f\x34\x01\xb6\x9e\x06\x9e\x77\x9a\xff\xff\xb7\x7f\xff\xff\xee\x01\x3f\x7b\xc0\x8f\x1e\xf0\xa5\x07\x7c\xee\x01\x9f\x78\xc0\x43\x0f\x90\x1e\xf0\xb6\x07\xbc\xe9\x01\x91\x07\x10\x0f\x78\xca\x03\xfe\x70\x81\xdf\x5c\xe0\x57\x17\xf8\xc5\x05\x7e\x72\x81\xef\x5d\xe0\x0b\x17\x28\x5c\x20\x73\x81\x43\x17\xe8\xb9\xc0\x8a\x0b\x38\x2e\xf0\x67\x07\xf8\xba\x03\x7c\xd6\x01\x3e\xea\x00\x1f\x74\x80\xb0\x03\xdc\xea\x00\x4f\x76\x80\x6f\x96\x80\xf1\x12\xb0\xba\x04\xdc\x5a\x02\x7e\x70\x80\xaf\x1c\xe0\x53\x07\xf8\xd8\x01\xa4\x03\xc4\x0e\x70\xe4\x00\xfb\x0e\xb0\xe3\x00\xcb\x4e\x53\xcf\x73\xce\x63\x3e\x5c\x8b\xc5\x62\xb1\x58\x2c\x16\xcb\xa3\x22\x0c\x52\x3d\xe6\x11\x08\x09\x55\x2c\xb3\x42\x13\x25\xe3\xed\x6e\x59\xfa\x03\xff\x8d\x77\xaa\xaa\x1b\x85\xc1\x9c\x67\x46\xb8\xce\x1a\xcd\x83\xda\x13\x9c\xd6\xde\xb2\x64\x79\x52\x55\x20\xc4\x68\x3c\x8b\xea\x91\x19\x6b\x3a\xe4\xac\x9d\xd6\xc2\x50\x24\x93\xbf\x85\xab\xb1\x97\x6c\x32\x22\x57\xa4\x5a\x4c\xa2\x19\x8d\x90\x30\x1b\x8f\x48\xcc\xa9\x52\xdb\xdd\x84\x71\xa6\x59\xb7\x4d\x79\x65\xc4\xc5\x90\x72\x7f\x50\xcb\xbb\xe3\x51\x55\x75\x89\xc8\x63\x9e\xc5\x27\xad\xf9\xe0\xbd\x17\x74\x9a\xa9\x17\xbb\xc1\x82\xa5\x03\x3a\x2f\x5e\xdd\x91\x25\x99\x9e\xdb\xef\x5e\x92\xe9\xe9\x6e\x8b\x56\xa5\x24\x95\xec\x78\x36\xe0\x60\xfa\x33\xe0\xb7\x44\x5c\x55\xaf\x65\xc9\x76\x59\xfa\xbb\x03\x73\xe0\xff\x5a\x72\x2c\x8a\xc9\x5c\x02\x77\x45\x31\x99\x2d\xd7\x18\xff\xb9\xd8\x70\xfe\x68\x8d\x54\x96\xfe\xa1\x62\x72\x8f\x8e\x59\x55\x2d\x3a\xff\xa9\x69\x20\xc6\x34\xcb\x17\x59\x42\x2d\xdb\x54\x17\x15\x54\x96\x92\xe6\x23\x46\x56\x8a\x33\x75\xa9\x07\xc2\x99\x2e\x09\x75\x2a\x19\x4d\xa2\x50\xcb\x28\xd4\x69\xd4\xec\x17\x06\x3a\xad\xa7\x26\x47\x62\x92\xbc\x50\x5e\x8f\x75\x26\x72\xd5\xcc\x4d\x33\x99\x51\xbd\x44\xdb\x99\x57\x1a\x33\x4c\x37\xa2\xb2\x5c\x89\xa9\x36\x35\xa4\x1b\xd3\xde\x0b\x9b\x4e\xbe\x48\x32\xa6\x7a\xb5\x4e\x95\xf4\xb7\x89\x3f\xf0\x07\x99\x2a\x38\x9d\xdc\xa7\x45\x9d\xfb\xc5\x05\xd4\x8f\x77\x6a\x2d\x6c\xbe\x20\x66\x83\x4b\x17\xef\xef\xcc\xdf\x79\x37\xda\x63\x67\xa6\xe5\xea\x04\xea\x98\xf5\xa8\x75\xa8\x30\x48\xd7\x9b\x6f\x9c\xd2\x93\x36\xf1\xf6\xc0\x78\xa6\x74\xaf\xd6\xfb\x24\x17\x39\xdb\xaa\xf5\x53\x4e\xca\x2b\x36\xcd\xce\x75\x8f\xf2\x6c\x94\xf7\x09\x67\xc7\x7a\x6b\xaa\x17\x34\x49\xb2\x7c\xd4\x27\x6b\xfe\xcb\x92\x8d\x5b\x79\x28\x64\xc2\x64\x9f\xac\x17\xe7\x44\x09\x9e\x25\x64\x79\x73\x73\xb3\x79\xaa\x93\x55\xa2\xd3\x99\xf5\x9b\x80\x5e\x2c\x38\xa7\x85\x62\x7d\xd2\x8e\xa6\x31\xe6\xc4\x67\x42\xe2\x53\xa9\x84\xec\x93\x42\x64\xb9\x66\xb2\x31\x9a\xf6\x2e\xeb\x37\x90\x29\x89\xe8\x49\xc1\xb6\xbb\x26\xf9\x20\x56\xaa\x1b\x21\x6c\x5e\x51\xe1\xed\x5e\x8f\x3c\xd8\x1f\xec\x13\x76\x5e\x64\x92\x9a\x1b\x27\x5a\x90\x42\x8a\x82\x49\xa2\x26\xb9\xa6\xe7\xa4\xd7\x33\xce\xc1\xfe\xdd\x07\x47\x07\xf7\x48\x13\xf9\x57\x00\x00\x00\xff\xff\xe4\x29\xb9\xa1\x00\x30\x00\x00")

func dataPasswordsHtmlSwpBytes() ([]byte, error) {
	return bindataRead(
		_dataPasswordsHtmlSwp,
		"data/.passwords.html.swp",
	)
}

func dataPasswordsHtmlSwp() (*asset, error) {
	bytes, err := dataPasswordsHtmlSwpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/.passwords.html.swp", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1483430204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataEdit_passwordHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x55\x5f\x6f\xfa\x36\x14\x7d\xef\xa7\xb8\xf5\x7b\x08\x4c\xda\x0b\x75\x22\x4d\x4d\x37\x4d\x6a\x01\xad\xed\x24\x9e\x2a\x93\x5c\x88\x35\xc7\xce\x6c\xa7\x14\x45\xfe\xee\x93\x13\x07\x88\x46\x7f\x2d\xbf\x17\x70\x7c\xef\x3d\xe7\xdc\x3f\xb9\xa1\xb7\xd9\xf2\xfe\x65\xbd\x7a\x80\xd2\x56\x22\xbd\xa1\xb7\x51\xf4\xb2\xcc\x96\xdd\x23\xa0\xc9\x59\xcd\xe5\x2e\x8a\xd2\x1b\xda\x3b\x00\x50\x63\x0f\x02\xc1\x1e\x6a\x4c\x88\xc5\x0f\x1b\xe7\xc6\x10\x6f\x01\x68\x04\xb4\xdd\x01\x40\x70\x63\xa3\xce\x75\x0e\x52\x49\xbc\xeb\xee\x5d\xf7\x2b\xd8\x06\x4f\x9e\x05\x37\xb5\x60\x87\x39\x70\x29\xb8\xc4\x68\x23\x54\xfe\xcf\x5d\x30\xee\x79\x61\xcb\x39\xfc\x32\x9b\xd6\x1f\xc3\x9d\x27\x8d\x98\xe0\x3b\x39\x07\xcd\x77\xa5\x3d\x61\xd3\xb8\xa3\xec\x74\x96\xb3\xf4\xb5\x2e\x98\xc5\x78\x81\x7b\x58\x31\x63\xf6\x4a\x17\x34\x2e\x67\x9d\x79\xab\x74\x05\x15\xda\x52\x15\x09\x59\x2d\x9f\x5f\x08\xb0\xdc\x72\x25\x13\xd2\xb6\x93\x3f\x26\x2b\xad\x72\x34\xe6\x77\xa5\xab\x47\x95\x3b\x17\x52\xa4\x5c\xd6\x8d\x0d\xe9\x97\xbc\x28\x50\x12\x90\xac\xc2\x10\xb6\x50\x32\x47\x1f\xb4\x60\x15\x3a\x47\xe0\x9d\x89\xa6\x37\x66\xbd\xd1\x5f\xc6\x29\x7c\x0b\xed\x2f\xfc\xb7\xe1\x1a\xcd\xa3\xda\x71\x79\x01\xd5\xea\x06\xbf\x8f\xf6\x5b\x97\xdf\x67\xe2\x7a\x6b\xaf\xee\x2b\x38\x5e\x8c\x63\xff\xcc\xce\xe3\x1a\x91\x86\x56\x51\xc1\x87\xa3\x7f\xe8\xfa\xbe\x55\x3a\x21\x8d\x41\xfd\xe6\xb1\x48\xfa\x6a\x50\x83\x17\x34\x07\x1a\x77\x2e\x67\x21\xe7\x12\x7c\xdf\x07\x01\xa7\xf8\x91\x0e\x8f\x35\xe4\xa6\xfb\xda\x15\xf1\x51\x4c\x7c\x52\xf3\xa9\xb0\x3a\xcc\x09\x49\x87\x89\xb9\x46\xd6\x31\x7a\xa4\x6a\x40\xfa\x79\x55\x85\xaa\x18\x97\x24\xcd\xba\xff\x6b\x14\x85\xc8\x91\x9e\x1e\xc5\x39\x72\x9d\x08\xa9\x2c\x1a\x92\x2e\xfc\xdf\x25\x09\x9e\x96\x69\x64\x81\xb9\x77\x07\xad\xf6\x26\x21\xb3\x29\x81\x5c\x09\x93\x90\x5f\xa7\x24\x0d\x2f\x83\x45\xe3\x1c\x8d\x87\xb8\xab\xc4\xe0\x47\xed\x5f\x0c\x92\x3e\xf8\x03\xf3\xa3\x0b\x19\xb3\x5f\x0e\x91\x5f\x08\x43\x6d\x06\x8c\x51\x71\x1e\xfa\x4b\xdf\xab\x5a\xb0\x1c\x4b\x25\x0a\xd4\x09\x59\xaf\xd7\xeb\xe8\xe9\x29\xca\xb2\xef\x94\x6d\xd8\xa3\x05\x37\x6c\x23\x10\xf8\x16\x24\xee\x41\xd5\x9d\x50\x6e\x40\x2a\x0b\x06\x05\xe6\x16\x0b\xbf\x5f\x2f\x16\x1c\xf7\x6f\x39\xb3\xb8\x53\xfa\x40\x52\xbf\xc5\xee\xc3\xd3\x35\x13\x30\x42\xb9\xae\xe3\x27\xf2\x1f\x11\xf7\x69\x04\xb6\x53\xc8\xd1\x01\x80\x86\xbc\x43\x9d\xa7\xe3\x64\x68\xdc\x9b\xcf\x23\xda\x56\x33\xb9\x43\x98\x64\x93\xe0\xc6\x7d\x4f\x3e\xc7\x6c\xdb\xc9\xdf\xfe\xe4\x1c\x69\x5b\xbe\x85\xc9\x73\x28\xae\x73\xc7\x3a\x27\x64\x38\x91\xb6\x45\x59\x38\x77\x4e\xe9\x49\x23\x18\xe8\x0e\x10\x8d\xe9\x2e\x8a\xec\x40\x4e\x95\x88\x7b\xfc\xff\xd7\x98\xc6\xc3\x4e\x1c\xb5\xc9\x34\x9b\x8a\xdb\xe3\xfc\x3d\xb3\x77\x0c\x5b\x94\xc6\xfe\xfb\x94\xde\xd0\xb8\xff\xee\xfe\x17\x00\x00\xff\xff\x39\xb4\xd1\x00\xa9\x07\x00\x00")

func dataEdit_passwordHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataEdit_passwordHtml,
		"data/edit_password.html",
	)
}

func dataEdit_passwordHtml() (*asset, error) {
	bytes, err := dataEdit_passwordHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/edit_password.html", size: 1961, mode: os.FileMode(420), modTime: time.Unix(1483430589, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataLoginHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x93\xcd\x6e\xdc\x20\x10\xc7\xef\x79\x8a\x29\xf7\x0d\xdd\xe6\xe6\xb0\x48\x55\xd2\xf6\x12\x6d\x56\x4d\x7a\xe8\x91\x35\xe3\x05\x15\x83\x0b\xb8\xce\x6a\xe5\x77\xaf\x00\x7b\x9d\x4a\xa9\x9a\xf4\x82\x87\xf9\xf8\xfd\x67\x3c\x36\x7b\x77\x7b\x7f\xf3\xf8\x7d\xf7\x09\x54\x6c\x0d\xbf\x60\xe5\x01\xc0\x42\x3c\x1a\x84\x78\xec\x70\x43\x22\x3e\x45\x5a\x87\x40\x52\x04\xa0\x37\x70\xca\x06\x80\xd1\x21\xae\x72\x6a\x05\xd6\x59\xbc\xce\xfe\x31\x9f\x46\xec\x71\xc9\x94\x3a\x74\x46\x1c\x2b\xd0\xd6\x68\x8b\xab\xbd\x71\xf5\x8f\xeb\x29\x38\x68\x19\x55\x05\x1f\xd6\xef\xbb\xa7\xd9\x97\x44\x57\xc2\xe8\x83\xad\xc0\xeb\x83\x8a\x0b\x9b\xd1\x2c\x99\xfb\x54\x6b\x7e\xe7\x0e\xda\x32\xaa\xd6\xc5\x71\xc5\x99\x00\xe5\xb1\xd9\x90\xd3\xe9\xf2\xcb\xe5\x16\x87\x6f\x01\xfd\x9d\xab\xc7\x91\xf0\x2d\x0e\x8c\x0a\xce\xa8\xba\xca\xe9\x8d\xf3\x2d\xb4\x18\x95\x93\x1b\xb2\xbb\x7f\x78\x24\x20\xea\xa8\x9d\x9d\xaa\x77\xde\xd5\x18\xc2\x67\xe7\xdb\x89\x90\xdb\x60\xda\x76\x7d\x9c\xde\x8f\xd2\x52\xa2\x25\x60\x45\x8b\xb3\xa8\xb3\x35\xa6\xa2\xad\x68\x71\x1c\x09\xfc\x12\xa6\x2f\xc1\xdb\x12\x4c\x4e\xca\xe1\x55\xb4\xaf\xf8\xb3\xd7\x1e\x43\x9e\xf4\x05\x6a\x23\x4c\xc0\xd7\xe3\x3e\xe6\x01\x5f\xe0\x98\xc4\x4f\x9c\x82\xe9\x0d\x9f\x96\xc1\x8c\x9e\xcd\x74\xc9\x9b\x6d\x9c\xdf\x90\x44\x25\x3c\x61\x2a\x60\x34\x07\x9e\x25\x3e\xef\x23\xed\x73\xee\x22\x57\x81\x2f\x53\x49\x7a\x56\xa1\x8b\xcc\x5f\x15\x3b\x11\xc2\xe0\xbc\x24\x7c\x37\x59\x6f\x51\x3e\x57\xff\xa7\xfa\x8d\x93\x48\x78\x3a\xdf\xa2\x5a\xa7\xaa\x7f\x2b\x16\x21\x3e\x73\xff\xc0\x85\x7e\xdf\xea\x78\xde\xd4\x43\xb9\x52\xbe\x30\x18\x2d\xfb\x62\x34\x7d\xd3\xfc\x82\xd1\xf2\x33\xff\x0e\x00\x00\xff\xff\x40\x24\xa4\x45\xe4\x03\x00\x00")

func dataLoginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataLoginHtml,
		"data/login.html",
	)
}

func dataLoginHtml() (*asset, error) {
	bytes, err := dataLoginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/login.html", size: 996, mode: os.FileMode(420), modTime: time.Unix(1480984338, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataNewHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x53\xc9\x6e\xdb\x30\x10\xbd\xe7\x2b\xa6\x3c\xd7\x61\x1b\xa4\x3e\xc8\x94\x80\xb6\x69\x7b\x09\x12\xc7\xce\xa5\xa7\x80\x96\xc6\x12\x51\x2e\x0a\x49\xd5\x36\x0c\xfd\x7b\x41\x52\xde\x0a\x07\x88\x2f\x12\x39\xcb\x7b\x6f\x16\xb2\x0f\x77\x8f\xdf\x9f\x7f\x4f\x7f\x40\xe3\x95\x2c\xae\x58\xfa\x01\x30\xe7\x37\x12\xc1\x6f\x5a\xcc\x89\xc7\xb5\xa7\xa5\x73\x24\x78\x00\x3a\x09\xdb\x78\x00\x90\xc2\xf9\x51\x0c\xcd\x40\x1b\x8d\x93\x68\xef\xe3\x57\xf2\x05\x1e\x22\x2b\xe1\x5a\xc9\x37\x19\x08\x2d\x85\xc6\xd1\x42\x9a\xf2\xcf\x64\x70\xae\x44\xe5\x9b\x0c\x6e\x3e\x7f\x6a\xd7\x3b\x5b\x20\x1d\x71\x29\x6a\x9d\x81\x15\x75\xe3\x0f\xd8\x8c\x46\xca\xa8\x73\x69\xac\x02\x85\xbe\x31\x55\x4e\xa6\x8f\xf3\x67\x02\xbc\xf4\xc2\xe8\x9c\x6c\xb7\xd7\xbf\xae\xa7\xd6\x94\xe8\xdc\x4f\x63\xd5\xbd\x29\xfb\x7e\xa8\x81\x09\xdd\x76\x7e\xa8\xaf\x11\x55\x85\x9a\x80\xe6\x0a\x87\xb4\x07\xa3\x4b\x0c\x49\x0f\x5c\x61\xdf\x13\xf8\xcb\x65\x97\x9c\x77\xc9\x19\x8c\xb4\x80\x77\xa1\xcd\xf0\xb5\x13\x16\xdd\xbd\xa9\x85\x3e\x83\xba\xe4\xd2\xe1\xbb\xe0\x5e\xed\x8b\xc3\xd2\xa2\x3f\x55\xf4\x34\x9b\x47\xeb\x25\xa2\xbe\xc6\x36\x9d\x51\xa3\x71\xf5\xd2\x39\xb4\x01\x2a\x21\x75\xb2\x18\xa6\xc2\xa4\xd8\x1d\xc3\x25\x8e\x78\x69\x6c\x4e\x02\x30\x29\x02\x52\x06\x8c\x46\xc7\x51\xe0\xb1\x94\x30\xd8\x9d\x90\x98\x05\x36\xb5\xa7\xa2\x7b\x16\x7a\xa0\x79\x93\xb1\xe5\xce\xad\x8c\xad\x48\x31\x1d\x4e\x97\x30\xef\xb3\x2f\x66\x2f\x9e\x66\x90\xba\x7d\x86\x4d\xd5\xd0\x60\xd8\xd6\x9c\xdc\x7c\x19\xb7\x6b\x92\x76\x7b\x7f\x73\xb6\xcc\x49\xc5\x3d\xcf\x84\xe2\x35\xd2\x56\xd7\x93\x05\x77\x38\xbe\xfd\x08\x27\x93\xfc\x36\xbe\xed\x7b\x42\x8b\xff\xc5\x0c\x1a\x76\xd4\x27\xf5\xb9\x6e\xa1\xc4\x61\x33\xe6\xe9\x7a\x8c\xc1\x68\x1a\x25\xa3\xe1\xdd\x14\x57\x8c\xa6\x07\xff\x2f\x00\x00\xff\xff\xe0\x04\xf0\x0a\x08\x04\x00\x00")

func dataNewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataNewHtml,
		"data/new.html",
	)
}

func dataNewHtml() (*asset, error) {
	bytes, err := dataNewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/new.html", size: 1032, mode: os.FileMode(420), modTime: time.Unix(1480982999, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPasswordsHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x94\xd1\x6b\xdb\x3e\x10\xc7\xdf\xfb\x57\x5c\xfd\xeb\xc3\x6f\x50\x5b\x2b\x65\x0f\x75\x15\x8d\x51\x97\xd2\xb1\xb5\x85\x75\x8c\x3d\x2a\x92\x6a\x8b\xc9\x96\x90\x14\x12\x63\xfc\xbf\x0f\xc9\x76\xe2\x24\xcd\x5e\x82\x75\xf7\xbd\xcb\xe7\x4e\x5f\x84\xcf\x8b\xe7\xbb\xd7\xdf\x2f\xf7\x50\xf9\x5a\x91\x33\x7c\x9e\xa6\xf0\xfa\x5c\x3c\x83\xd8\x18\x69\xa9\x97\xba\x01\xaf\xc1\x58\x6d\x84\x05\xd7\x36\x9e\x6e\x20\x4d\xc9\x19\x1e\x0a\x00\xb0\xf3\xad\x12\xe0\x5b\x23\x16\x89\x17\x1b\x8f\x98\x73\x49\xc8\x00\xc8\xba\x84\x2e\x7e\x01\xb0\x95\x75\xda\xe6\x60\xb4\x6c\xbc\xb0\xb7\x31\xdc\xc7\x5f\x4f\x97\x4a\x6c\x85\x4b\x6d\xb9\xb0\x29\xd3\x4a\x51\xe3\x44\x0e\xd3\xd7\x5e\x09\xbf\x04\x5f\x1d\xd4\xe4\x70\x65\x36\xe0\xb4\x92\x1c\xfe\xbb\xb9\xb9\xb9\x1d\xb3\x86\x72\x2e\x9b\x32\x87\x8f\xd9\x27\x2b\xea\x29\x1c\x60\x53\xaa\x64\xd9\xe4\xa0\xc4\x9b\x9f\xf7\x5f\xa9\x6d\x6f\x25\x9d\x4f\xe3\x90\x39\x34\xba\x99\x61\x60\x14\xc3\x71\x0b\xd5\x15\x79\xa1\xce\xad\xb5\xe5\x0e\xa3\xea\x6a\x08\x5e\x13\x4c\xa1\xb2\xe2\x6d\x91\x74\x5d\xf6\x90\xdd\x73\xe9\x27\xd9\x37\xcd\xfa\x3e\x21\x4f\x62\x8d\x11\x25\x18\x55\xd7\xb1\x66\x15\xb7\xda\x75\x17\xa5\xd2\x4b\xaa\x20\x5f\x40\xf6\xd0\xf7\x31\x66\x69\x53\x0a\xb8\x60\xd4\x5f\xc2\x85\x59\xbb\x98\x2c\xb2\x42\x3a\xa3\x68\xfb\x9d\x9a\x7e\xa0\xc7\x4a\x92\x91\x3e\x30\x74\x5d\x28\xe9\xfb\xf8\x1f\x30\x25\xe2\xd6\x27\x59\x38\x57\x56\x50\x4e\xb0\xb7\x04\xfb\x8a\x14\xba\xa6\xb2\xc1\xc8\x57\xf1\xf8\xd3\x09\x0b\x4f\xb4\x16\xdb\xc8\x17\x16\xdc\xe1\x86\x33\x0a\x55\x68\x6c\x31\xeb\xb9\xd4\xbc\xdd\x9d\x67\x33\x98\xb5\x1b\x61\x77\x62\x0b\x4c\x51\xe7\xe2\xae\x1e\x8b\xb0\x9c\x3d\x41\x90\x70\xd2\x75\xd9\x80\x16\xe6\xf1\xfc\x84\x24\xe0\x06\xda\xd3\xa2\x83\x10\x00\x0e\x6e\x1d\x01\x98\x36\x6d\x02\xce\xb2\xc0\x32\xde\x44\x76\xa7\x4d\xfb\x58\x97\x7d\x9f\x80\x6e\x98\x92\xec\xcf\x20\x7c\xf9\xf5\xbf\xaf\xa4\xfb\x90\xa0\x77\x9a\xee\xae\x7f\x6a\x73\xe4\x81\xcf\x92\x2f\x4e\x4d\x7c\x08\x26\xb8\xf4\x47\x60\xa1\xe3\x08\xf6\x1e\x02\xa2\xff\x1e\x96\x0b\x25\xbc\x38\xea\x5a\xc4\xf0\xe1\xc0\x83\xf8\xf4\xc8\xc7\xeb\x8e\xde\x80\x3d\x0f\x88\x86\xcf\x2e\x1f\xa3\x3d\x9b\x60\x34\x73\x26\x46\x83\x95\x77\x35\x18\xad\xc6\x77\x87\x59\x69\xfc\x44\x9d\x15\xd9\xd7\x1f\x61\x81\x18\x0d\x09\x72\x86\xd1\xf0\x46\xfd\x0d\x00\x00\xff\xff\xe1\x60\x5e\x10\xe5\x04\x00\x00")

func dataPasswordsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataPasswordsHtml,
		"data/passwords.html",
	)
}

func dataPasswordsHtml() (*asset, error) {
	bytes, err := dataPasswordsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/passwords.html", size: 1253, mode: os.FileMode(420), modTime: time.Unix(1483430196, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/.edit_password.html.swp": dataEdit_passwordHtmlSwp,
	"data/.passwords.html.swp": dataPasswordsHtmlSwp,
	"data/edit_password.html": dataEdit_passwordHtml,
	"data/login.html": dataLoginHtml,
	"data/new.html": dataNewHtml,
	"data/passwords.html": dataPasswordsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		".edit_password.html.swp": &bintree{dataEdit_passwordHtmlSwp, map[string]*bintree{}},
		".passwords.html.swp": &bintree{dataPasswordsHtmlSwp, map[string]*bintree{}},
		"edit_password.html": &bintree{dataEdit_passwordHtml, map[string]*bintree{}},
		"login.html": &bintree{dataLoginHtml, map[string]*bintree{}},
		"new.html": &bintree{dataNewHtml, map[string]*bintree{}},
		"passwords.html": &bintree{dataPasswordsHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

