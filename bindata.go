// Code generated by go-bindata.
// sources:
// data/login.html
// data/new.html
// data/new_password.html
// data/passwords.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataLoginHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x93\xcd\x6e\xdc\x20\x10\xc7\xef\x79\x8a\x29\xf7\x0d\xdd\xe6\xe6\xb0\x48\x55\xd2\xf6\x12\x6d\x56\x4d\x7a\xe8\x91\x35\xe3\x05\x15\x83\x0b\xb8\xce\x6a\xe5\x77\xaf\x00\x7b\x9d\x4a\xa9\x9a\xf4\x82\x87\xf9\xf8\xfd\x67\x3c\x36\x7b\x77\x7b\x7f\xf3\xf8\x7d\xf7\x09\x54\x6c\x0d\xbf\x60\xe5\x01\xc0\x42\x3c\x1a\x84\x78\xec\x70\x43\x22\x3e\x45\x5a\x87\x40\x52\x04\xa0\x37\x70\xca\x06\x80\xd1\x21\xae\x72\x6a\x05\xd6\x59\xbc\xce\xfe\x31\x9f\x46\xec\x71\xc9\x94\x3a\x74\x46\x1c\x2b\xd0\xd6\x68\x8b\xab\xbd\x71\xf5\x8f\xeb\x29\x38\x68\x19\x55\x05\x1f\xd6\xef\xbb\xa7\xd9\x97\x44\x57\xc2\xe8\x83\xad\xc0\xeb\x83\x8a\x0b\x9b\xd1\x2c\x99\xfb\x54\x6b\x7e\xe7\x0e\xda\x32\xaa\xd6\xc5\x71\xc5\x99\x00\xe5\xb1\xd9\x90\xd3\xe9\xf2\xcb\xe5\x16\x87\x6f\x01\xfd\x9d\xab\xc7\x91\xf0\x2d\x0e\x8c\x0a\xce\xa8\xba\xca\xe9\x8d\xf3\x2d\xb4\x18\x95\x93\x1b\xb2\xbb\x7f\x78\x24\x20\xea\xa8\x9d\x9d\xaa\x77\xde\xd5\x18\xc2\x67\xe7\xdb\x89\x90\xdb\x60\xda\x76\x7d\x9c\xde\x8f\xd2\x52\xa2\x25\x60\x45\x8b\xb3\xa8\xb3\x35\xa6\xa2\xad\x68\x71\x1c\x09\xfc\x12\xa6\x2f\xc1\xdb\x12\x4c\x4e\xca\xe1\x55\xb4\xaf\xf8\xb3\xd7\x1e\x43\x9e\xf4\x05\x6a\x23\x4c\xc0\xd7\xe3\x3e\xe6\x01\x5f\xe0\x98\xc4\x4f\x9c\x82\xe9\x0d\x9f\x96\xc1\x8c\x9e\xcd\x74\xc9\x9b\x6d\x9c\xdf\x90\x44\x25\x3c\x61\x2a\x60\x34\x07\x9e\x25\x3e\xef\x23\xed\x73\xee\x22\x57\x81\x2f\x53\x49\x7a\x56\xa1\x8b\xcc\x5f\x15\x3b\x11\xc2\xe0\xbc\x24\x7c\x37\x59\x6f\x51\x3e\x57\xff\xa7\xfa\x8d\x93\x48\x78\x3a\xdf\xa2\x5a\xa7\xaa\x7f\x2b\x16\x21\x3e\x73\xff\xc0\x85\x7e\xdf\xea\x78\xde\xd4\x43\xb9\x52\xbe\x30\x18\x2d\xfb\x62\x34\x7d\xd3\xfc\x82\xd1\xf2\x33\xff\x0e\x00\x00\xff\xff\x40\x24\xa4\x45\xe4\x03\x00\x00")

func dataLoginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataLoginHtml,
		"data/login.html",
	)
}

func dataLoginHtml() (*asset, error) {
	bytes, err := dataLoginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/login.html", size: 996, mode: os.FileMode(420), modTime: time.Unix(1480984338, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataNewHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x53\xc9\x6e\xdb\x30\x10\xbd\xe7\x2b\xa6\x3c\xd7\x61\x1b\xa4\x3e\xc8\x94\x80\xb6\x69\x7b\x09\x12\xc7\xce\xa5\xa7\x80\x96\xc6\x12\x51\x2e\x0a\x49\xd5\x36\x0c\xfd\x7b\x41\x52\xde\x0a\x07\x88\x2f\x12\x39\xcb\x7b\x6f\x16\xb2\x0f\x77\x8f\xdf\x9f\x7f\x4f\x7f\x40\xe3\x95\x2c\xae\x58\xfa\x01\x30\xe7\x37\x12\xc1\x6f\x5a\xcc\x89\xc7\xb5\xa7\xa5\x73\x24\x78\x00\x3a\x09\xdb\x78\x00\x90\xc2\xf9\x51\x0c\xcd\x40\x1b\x8d\x93\x68\xef\xe3\x57\xf2\x05\x1e\x22\x2b\xe1\x5a\xc9\x37\x19\x08\x2d\x85\xc6\xd1\x42\x9a\xf2\xcf\x64\x70\xae\x44\xe5\x9b\x0c\x6e\x3e\x7f\x6a\xd7\x3b\x5b\x20\x1d\x71\x29\x6a\x9d\x81\x15\x75\xe3\x0f\xd8\x8c\x46\xca\xa8\x73\x69\xac\x02\x85\xbe\x31\x55\x4e\xa6\x8f\xf3\x67\x02\xbc\xf4\xc2\xe8\x9c\x6c\xb7\xd7\xbf\xae\xa7\xd6\x94\xe8\xdc\x4f\x63\xd5\xbd\x29\xfb\x7e\xa8\x81\x09\xdd\x76\x7e\xa8\xaf\x11\x55\x85\x9a\x80\xe6\x0a\x87\xb4\x07\xa3\x4b\x0c\x49\x0f\x5c\x61\xdf\x13\xf8\xcb\x65\x97\x9c\x77\xc9\x19\x8c\xb4\x80\x77\xa1\xcd\xf0\xb5\x13\x16\xdd\xbd\xa9\x85\x3e\x83\xba\xe4\xd2\xe1\xbb\xe0\x5e\xed\x8b\xc3\xd2\xa2\x3f\x55\xf4\x34\x9b\x47\xeb\x25\xa2\xbe\xc6\x36\x9d\x51\xa3\x71\xf5\xd2\x39\xb4\x01\x2a\x21\x75\xb2\x18\xa6\xc2\xa4\xd8\x1d\xc3\x25\x8e\x78\x69\x6c\x4e\x02\x30\x29\x02\x52\x06\x8c\x46\xc7\x51\xe0\xb1\x94\x30\xd8\x9d\x90\x98\x05\x36\xb5\xa7\xa2\x7b\x16\x7a\xa0\x79\x93\xb1\xe5\xce\xad\x8c\xad\x48\x31\x1d\x4e\x97\x30\xef\xb3\x2f\x66\x2f\x9e\x66\x90\xba\x7d\x86\x4d\xd5\xd0\x60\xd8\xd6\x9c\xdc\x7c\x19\xb7\x6b\x92\x76\x7b\x7f\x73\xb6\xcc\x49\xc5\x3d\xcf\x84\xe2\x35\xd2\x56\xd7\x93\x05\x77\x38\xbe\xfd\x08\x27\x93\xfc\x36\xbe\xed\x7b\x42\x8b\xff\xc5\x0c\x1a\x76\xd4\x27\xf5\xb9\x6e\xa1\xc4\x61\x33\xe6\xe9\x7a\x8c\xc1\x68\x1a\x25\xa3\xe1\xdd\x14\x57\x8c\xa6\x07\xff\x2f\x00\x00\xff\xff\xe0\x04\xf0\x0a\x08\x04\x00\x00")

func dataNewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataNewHtml,
		"data/new.html",
	)
}

func dataNewHtml() (*asset, error) {
	bytes, err := dataNewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/new.html", size: 1032, mode: os.FileMode(420), modTime: time.Unix(1480982999, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataNew_passwordHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x55\x41\x6f\xa3\x3a\x10\xbe\xf7\x57\x4c\x7d\x7e\x84\xe4\x49\xef\x92\x1a\xa4\xa7\xd2\xf7\x2e\x6d\x12\x6d\xd3\x95\x72\xaa\x1c\x98\x04\x6b\x8d\xcd\xda\xa6\x69\x84\xf8\xef\x2b\x83\x09\x41\x9b\xee\x36\x7b\x09\xc6\x9e\xf9\xbe\xcf\xdf\x4c\x06\x7a\x9b\x2c\xef\xd7\x9b\xd5\x03\xe4\xb6\x10\xf1\x0d\xbd\x0d\x82\xf5\x32\x59\xb6\xaf\x80\x26\x65\x25\x97\xfb\x20\x88\x6f\x68\x17\x00\x40\x8d\x3d\x0a\x04\x7b\x2c\x31\x22\x16\xdf\x6d\x98\x1a\x43\xdc\x09\x40\x25\xa0\x6e\x17\x00\x82\x1b\x1b\xb4\xa1\x73\x90\x4a\xe2\x5d\xbb\xdf\xb4\xbf\x82\x6d\x71\x88\xcc\xb8\x29\x05\x3b\xce\x81\x4b\xc1\x25\x06\x5b\xa1\xd2\x6f\x77\xfe\xf0\xc0\x33\x9b\xcf\xe1\xef\xd9\xb4\x7c\xef\xf7\x1c\x69\xc0\x04\xdf\xcb\x39\x68\xbe\xcf\xed\x80\x4d\xc3\x96\xb2\xd5\x99\xcf\xe2\x97\x32\x63\x16\xc3\x05\x1e\x60\xc5\x8c\x39\x28\x9d\xd1\x30\x9f\xb5\xc7\xb7\x41\x80\xef\x25\xd7\x68\x00\xa5\x45\x6d\x80\x19\x10\x2a\x65\xe2\x2f\x48\x95\x7c\x43\x6d\x0d\x58\x05\x2f\xeb\x7b\xe0\x12\x6c\x8e\x90\x6d\xc1\x59\x01\x40\x77\x4a\x17\x50\xa0\xcd\x55\x16\x91\xd5\xf2\x79\x4d\x80\xa5\x96\x2b\x19\x91\xba\x9e\xfc\x3f\x59\x69\x95\xa2\x31\xff\x29\x5d\x3c\xaa\xb4\x69\xbc\x3f\x94\xcb\xb2\xb2\xde\xbb\x9c\x67\x19\x4a\x02\x92\x15\xe8\xd3\x16\x4a\xa6\xe8\x92\x16\xac\xc0\xa6\x21\xf0\xc6\x44\xd5\x1d\x26\xdd\xa1\xdb\x0c\x63\xf8\x14\xda\x17\xfc\x5e\xb9\xfb\x3d\xaa\x3d\x97\x17\x50\xad\xae\xf0\xf3\x68\xff\xb6\xf7\xbb\x00\x23\xf1\xf0\x5a\x7a\x77\x1d\x5c\x87\x56\x89\xd8\x97\x8b\x0a\xde\x2f\xdd\x4b\x5b\xfb\x9d\xd2\x11\xa9\x0c\xea\x57\xc7\x40\xe2\x17\x83\x1a\x1c\xee\x1c\x68\xd8\x86\x9c\xa5\x9c\x0b\x73\xb5\xef\x65\x0d\xf9\x23\x9f\x1c\x56\x2f\x51\x77\x16\x64\xe1\x49\x4c\x38\xa8\xf9\x50\xd8\xe9\x36\x71\xdf\x35\xd7\xc8\x1a\xbc\x38\x57\xd5\x23\xfd\xb9\xaa\x4c\x15\x8c\x4b\x12\x27\xed\xf3\x1a\x45\x3e\x73\xa4\xa7\x43\x69\x1a\x72\x9d\x08\xa9\x2c\x1a\x12\x2f\xdc\xe3\x92\x04\x47\xcb\x34\x32\xcf\xdc\x85\x83\x56\x07\x13\x91\xd9\x94\x40\xaa\x84\x89\xc8\x3f\x53\x12\xfb\x9e\xb6\x68\x9a\x86\x86\x7d\xde\x55\x62\xfc\xff\x97\xc4\x0f\x6e\xc1\x5c\x7f\x42\xc2\xec\x6f\x9b\xc8\x0d\x85\xde\x9b\x1e\x63\x64\xce\x43\xb7\xe9\x6a\x55\x0a\x96\x62\xae\x44\x86\x3a\x22\x9b\xcd\x66\x13\x3c\x3d\x05\x49\xf2\x19\xdb\xfa\x59\x9a\x71\xc3\xb6\x02\x81\xef\x40\xe2\x01\x54\xd9\x0a\xe5\x06\xa4\xb2\x60\x50\x60\x6a\x31\xeb\x06\xcb\x05\xc3\xf1\xf0\x9a\x32\x8b\x7b\xa5\x8f\x24\x76\x93\xec\xde\xbf\x5d\xd3\x01\x23\x94\xeb\x2a\x3e\x90\xff\x8a\xb8\xbb\x86\x67\x1b\x52\x4e\x01\x00\xd4\xdf\xdb\xfb\x3c\x1d\x5f\x86\x86\xdd\xf1\x79\x46\x5d\x6b\x26\xf7\x08\x93\x64\xe2\xc3\xb8\xab\xc9\xc7\x98\x75\x3d\xf9\xea\x56\xae\x6e\x75\xcd\x77\x30\x79\xf6\xee\x36\x4d\xef\x73\x44\xfa\x15\xa9\x6b\x94\x59\xd3\x9c\x53\x3a\xd2\x00\x7a\xba\x23\x04\x63\xba\x8b\x22\x5b\x90\xc1\x89\xb0\xc3\xff\xd9\x63\x1a\xf6\x33\x71\x54\x26\x53\x6d\x0b\x6e\x4f\xfd\xf7\xcc\xde\xd0\x4f\x51\x1a\xba\xcf\x4c\x7c\x43\xc3\xee\xdb\xfb\x23\x00\x00\xff\xff\x18\xeb\x48\xcb\xad\x07\x00\x00")

func dataNew_passwordHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataNew_passwordHtml,
		"data/new_password.html",
	)
}

func dataNew_passwordHtml() (*asset, error) {
	bytes, err := dataNew_passwordHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/new_password.html", size: 1965, mode: os.FileMode(420), modTime: time.Unix(1482654899, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPasswordsHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x54\x51\x6b\xdb\x3c\x14\x7d\xef\xaf\xb8\xf5\xd7\x87\x6f\x50\x5b\x2b\x65\x0f\x75\x55\xc1\xa8\x4b\xe9\xd8\x9a\xc0\x3a\xc6\x1e\x15\x49\xb5\xc5\x64\x4b\x48\x0a\x89\x31\xfe\xef\x43\xb2\x9d\x38\x09\x19\x7b\x31\xba\xe7\x9e\x7b\x7c\x74\xef\x45\xf8\xb2\x58\x3c\xbe\xfd\x5a\x3e\x41\xe5\x6b\x45\x2e\xf0\x65\x9a\xc2\xdb\xa2\x58\x80\xd8\x1a\x69\xa9\x97\xba\x01\xaf\xc1\x58\x6d\x84\x05\xd7\x36\x9e\x6e\x21\x4d\xc9\x05\x1e\x0a\x00\xb0\xf3\xad\x12\xe0\x5b\x23\x1e\x12\x2f\xb6\x1e\x31\xe7\x92\x90\x01\x90\x75\x09\x5d\x3c\x01\xb0\xb5\x75\xda\xe6\x60\xb4\x6c\xbc\xb0\xf7\x11\xee\xe3\xd7\xd3\x95\x12\x3b\xe2\x4a\x5b\x2e\x6c\xca\xb4\x52\xd4\x38\x91\xc3\x74\x3a\x28\xe1\xd7\xe0\xab\xa3\x9a\x1c\x6e\xcc\x16\x9c\x56\x92\xc3\x7f\x77\x77\x77\xf7\x63\xd6\x50\xce\x65\x53\xe6\xf0\x31\xfb\x64\x45\x3d\xc1\xc1\x6c\x4a\x95\x2c\x9b\x1c\x94\x78\xf7\x73\xfd\xb5\xda\x69\x2b\xe9\x7c\x1a\x2f\x99\x43\xa3\x9b\x99\x0d\x8c\x22\x1c\xbb\x50\xdd\x90\x25\x75\x6e\xa3\x2d\x77\x18\x55\x37\x03\x78\x4b\x30\x85\xca\x8a\xf7\x87\xa4\xeb\xb2\xe7\xec\x55\x6c\x26\xd6\x57\xcd\xfa\x3e\x21\xaf\x62\x83\x11\x25\x18\x55\xb7\xb1\x64\x1d\x9b\xda\x75\x57\xa5\xd2\x2b\xaa\x20\x7f\x80\xec\xb9\xef\x23\x66\x69\x53\x0a\xb8\x62\xd4\x5f\xc3\x95\xd9\xb8\x98\x2c\xb2\x42\x3a\xa3\x68\xfb\x8d\x9a\x7e\x30\x8f\x95\x24\xa3\xf9\x60\xa1\xeb\x42\x49\xdf\xc7\x7f\xc0\x94\x88\x4d\x9f\x68\x21\xae\xac\xa0\x9c\x60\x6f\x09\xf6\x15\x29\x74\x4d\x65\x83\x91\xaf\x62\xf8\xc3\x09\x0b\xaf\xb4\x16\x3b\xe4\x33\x0b\xcb\xe1\x86\x18\x85\x2a\x34\x4a\xcc\x34\x57\x9a\xb7\xfb\x78\x76\x07\xb3\x71\xa3\xd9\x3d\xd9\x02\x53\xd4\xb9\xd8\xaa\x97\x22\x34\xe7\x80\x10\x28\x9c\x74\x5d\x36\x58\x0b\xf7\xf1\xfc\x0c\x25\xd8\x0d\x6e\xcf\x93\x8e\x20\x00\x1c\x96\x75\x34\xc0\xb4\x69\x13\x70\x96\x05\x2f\xe3\x24\xb2\x47\x6d\xda\x97\xba\xec\xfb\x04\x74\xc3\x94\x64\xbf\x07\xe2\xf2\xe7\xff\xbe\x92\xee\x43\x82\xfe\x2e\x2a\xb8\xf4\x27\xa2\x4f\x5c\xfa\x63\xd1\x40\xfc\x57\x51\x2e\x94\xf0\xe2\x44\xb6\x88\xf0\xb1\xf0\x40\x3e\x2f\x7d\xda\xab\x38\x58\x38\x18\xa0\x68\xf8\x6c\x72\x18\x1d\xcc\x18\xa3\xd9\x5a\x61\x34\xec\xe1\xbe\x06\xa3\xf5\xf8\x66\x30\x2b\x8d\x9f\x5c\x67\x45\xf6\xe5\x7b\x98\x37\x46\x43\x82\x5c\x60\x34\xbc\x2f\x7f\x02\x00\x00\xff\xff\xf3\xb8\xc7\x9c\xa1\x04\x00\x00")

func dataPasswordsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataPasswordsHtml,
		"data/passwords.html",
	)
}

func dataPasswordsHtml() (*asset, error) {
	bytes, err := dataPasswordsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/passwords.html", size: 1185, mode: os.FileMode(420), modTime: time.Unix(1482638721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/login.html": dataLoginHtml,
	"data/new.html": dataNewHtml,
	"data/new_password.html": dataNew_passwordHtml,
	"data/passwords.html": dataPasswordsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"login.html": &bintree{dataLoginHtml, map[string]*bintree{}},
		"new.html": &bintree{dataNewHtml, map[string]*bintree{}},
		"new_password.html": &bintree{dataNew_passwordHtml, map[string]*bintree{}},
		"passwords.html": &bintree{dataPasswordsHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

