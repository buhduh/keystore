// Code generated by go-bindata.
// sources:
// data/edit_password.html
// data/login.html
// data/new.html
// data/passwords.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataEdit_passwordHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x55\x51\x8f\xe3\x26\x10\x7e\xdf\x5f\x31\xc7\xbb\x43\xd2\x53\x5f\x72\x18\xa9\x3a\x6f\xab\x4a\x7b\x49\xd4\xdd\xab\x94\xa7\x13\xb1\x27\x31\x2a\x06\x17\xf0\x65\x23\xcb\xff\xbd\xc2\xc6\x49\xac\x66\x7b\x9b\xbe\xd8\xc0\xcc\xf7\xcd\xc7\xc7\x18\xb3\x0f\xd9\xfa\xf3\xcb\x76\xf3\x08\xa5\xaf\x14\x7f\x60\x1f\x92\xe4\x65\x9d\xad\xfb\x29\xa0\xcb\x45\x2d\xf5\x21\x49\xf8\x03\x1b\x12\x00\x98\xf3\x27\x85\xe0\x4f\x35\xa6\xc4\xe3\xab\xa7\xb9\x73\x24\x44\x00\x1a\x05\x6d\x3f\x00\x50\xd2\xf9\xa4\x4f\x5d\x82\x36\x1a\x3f\xf5\xeb\x5d\xff\x54\x62\x87\x97\xcc\x42\xba\x5a\x89\xd3\x12\xa4\x56\x52\x63\xb2\x53\x26\xff\xeb\x53\x0c\x1e\x65\xe1\xcb\x25\xfc\xb4\x98\xd7\xaf\xe3\x5a\x28\x9a\x08\x25\x0f\x7a\x09\x56\x1e\x4a\x7f\xe1\x66\xb4\x2f\xd9\xeb\x2c\x17\xfc\x6b\x5d\x08\x8f\x74\x85\x47\xd8\x08\xe7\x8e\xc6\x16\x8c\x96\x8b\x21\xfc\x91\x33\x01\xa5\xc5\x7d\x4a\xda\x76\xf6\xdb\xec\xc9\x1c\x4c\xe3\x9f\x4c\xde\x75\x84\x0f\x13\x46\x05\x67\xb4\xfc\xd8\x03\xf6\xc6\x56\x50\xa1\x2f\x4d\x91\x92\xcd\xfa\xf9\x85\x80\xc8\xbd\x34\x3a\xe2\x37\xd6\xe4\xe8\xdc\xaf\xc6\x56\x91\xa4\x97\xc5\xa4\xae\x1b\x1f\xfd\x2a\x65\x51\xa0\x26\xa0\x45\x85\x11\xb6\x32\x3a\xc7\x00\x5a\x89\x0a\xbb\x8e\xc0\x77\xa1\x9a\x21\x98\x0d\xc1\xb0\x48\x39\xbc\x8b\xed\x0f\xfc\xbb\x91\x16\xdd\x93\x39\x48\x7d\x83\xd5\xdb\x06\xdf\xcf\xf6\x4b\xbf\xbf\xb7\xc4\x0d\xd1\x41\xdd\x8f\xe8\x64\x31\xc5\xfe\x9e\x5d\xe3\x1a\xc5\xe3\xd9\x32\x25\xc7\x61\x98\xf4\x8d\xb2\x37\x36\x25\x8d\x43\xfb\x2d\x70\x11\xfe\xd5\xa1\x85\x20\x68\x09\x8c\xf6\x29\x57\x90\x6b\x09\xa1\x51\x46\x01\x17\xfc\x44\x47\xe0\x1a\xf7\x66\x07\xef\x0a\x7a\x16\x43\x2f\x6a\xde\x14\x56\xc7\xc6\x22\x7c\x6c\xb1\x7b\x64\x9d\xd1\x13\x55\x23\xd3\xff\x57\x55\x98\x4a\x48\x4d\x78\xd6\xbf\xef\x51\x14\x91\x13\x3d\x03\x4b\xd7\x91\xfb\x44\x68\xe3\xd1\x11\xbe\x0a\xaf\x5b\x12\x42\x59\x61\x51\xc4\xca\x43\x3a\x58\x73\x74\x29\x59\xcc\x09\xe4\x46\xb9\x94\xfc\x3c\x27\x3c\x7e\x0c\x1e\x5d\xd7\x31\x3a\xe2\xee\x12\x83\xaf\x75\xf8\x30\x08\x7f\x0c\x03\x11\x5a\x17\x32\xe1\x7f\xd8\x44\xe1\x06\x19\xbd\x19\x39\x26\xe6\x3c\x0e\x8b\xe1\xac\x6a\x25\x72\x2c\x8d\x2a\xd0\xa6\x64\xbb\xdd\x6e\x93\x2f\x5f\x92\x2c\x7b\x8f\x6d\xe3\xc5\x5b\x48\x27\x76\x0a\x41\xee\x41\xe3\x11\x4c\xdd\x0b\x95\x0e\xb4\xf1\xe0\x50\x61\xee\xb1\x08\x17\xf2\x4d\xc3\xf1\xf8\x2d\x17\x1e\x0f\xc6\x9e\x08\x0f\xd7\xde\xe7\x38\xbb\xa7\x03\x26\x2c\xf7\x9d\xf8\xa5\xf8\x7f\x15\x1e\xb6\x11\xab\x5d\x20\xe7\x04\x00\x16\xf7\x1d\x7d\x9e\x4f\x37\xc3\xe8\x10\xbe\x46\xb4\xad\x15\xfa\x80\x30\xcb\x66\x31\x4d\x86\x33\x79\x9b\xb3\x6d\x67\x7f\x86\x51\xd7\x91\xb6\x95\x7b\x98\x3d\x47\x73\xbb\xee\xec\x73\x4a\xc6\x11\x69\x5b\xd4\x45\xd7\x5d\x97\x0c\x45\x13\x18\xcb\x9d\x20\x99\x96\xbb\x29\xb2\x27\xb9\x38\x41\x07\xfe\x7f\x7b\xcc\xe8\x78\x27\x4e\x8e\xc9\x35\xbb\x4a\xfa\x73\xff\x3d\x8b\xef\x18\x6f\x51\x46\xc3\xff\x89\x3f\x30\x3a\xfc\xa8\xff\x09\x00\x00\xff\xff\x8d\x82\x45\xa7\xda\x07\x00\x00")

func dataEdit_passwordHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataEdit_passwordHtml,
		"data/edit_password.html",
	)
}

func dataEdit_passwordHtml() (*asset, error) {
	bytes, err := dataEdit_passwordHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/edit_password.html", size: 2010, mode: os.FileMode(420), modTime: time.Unix(1484596102, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataLoginHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x94\xcf\x6f\xdb\x20\x14\xc7\xef\xfd\x2b\xde\xb8\xa7\x2c\xeb\xcd\x25\x48\x53\xbb\xed\x12\xa5\xd1\xda\x1d\x76\x24\xf6\x4b\x40\xc3\xe0\x01\x5e\x1a\x45\xfe\xdf\x27\x7e\x38\x6e\xa5\x4c\xcd\x7a\xc1\xbc\x5f\x9f\xef\x03\x9e\xcc\x3e\xdc\x3f\xdc\x3d\xfd\x5c\x7f\x01\x19\x5a\xcd\xaf\x58\xfe\x00\x30\x1f\x0e\x1a\x21\x1c\x3a\x5c\x90\x80\xcf\x81\xd6\xde\x93\x18\x01\xe8\x35\x1c\xd3\x06\x40\x2b\x1f\x66\x29\xb5\x02\x63\x0d\xde\x26\xff\x90\x56\x2d\x36\x38\x65\x36\xca\x77\x5a\x1c\x2a\x50\x46\x2b\x83\xb3\x8d\xb6\xf5\xaf\xdb\x12\xdc\xab\x26\xc8\x0a\x3e\xcd\x3f\x76\xcf\xa3\x2f\x8a\xce\x84\x56\x3b\x53\x81\x53\x3b\x19\x26\x36\xa3\x49\x32\xf5\x29\xe7\x7c\x69\x77\xca\x30\x2a\xe7\xd9\x71\xc3\x99\x00\xe9\x70\xbb\x20\xc7\xe3\xf5\xb7\xeb\x15\xee\x7f\x78\x74\x4b\x5b\x0f\x03\xe1\x2b\xdc\x33\x2a\x38\xa3\xf2\xe6\x7c\xfa\xd2\xee\x6c\x1f\x4a\x76\x36\x5e\x15\x6c\xad\x6b\xa1\xc5\x20\x6d\xb3\x20\xeb\x87\xc7\x27\x02\xa2\x0e\xca\x9a\x52\xbf\x76\xb6\x46\xef\xbf\x5a\xd7\x16\x48\xea\x9b\x29\xd3\xf5\xa1\x5c\xa8\x54\x4d\x83\x86\x80\x11\x2d\x8e\x5d\x5a\x53\x63\x2c\x5a\x89\x16\x87\x81\xc0\x1f\xa1\xfb\x1c\xbc\xcf\xc1\xe8\xa4\x1c\x2e\xa2\x7d\xc7\xdf\xbd\x72\xe8\xd3\xd5\x9c\xa1\x6e\x85\xf6\x78\x39\xee\x73\x3a\xe0\x19\x8e\x8e\xfc\xc8\xc9\x98\x5e\xf3\xf2\x7a\x4c\xab\x71\x1b\x8d\x34\x0a\x5b\xeb\x16\x24\x52\x09\x8f\x98\x0a\x18\x4d\x81\x17\x89\x2f\xfb\x88\x03\x30\x76\x91\xaa\xc0\xe5\x53\x35\xf4\xa4\x42\x27\x99\x7f\x2a\x76\xc2\xfb\xbd\x75\x0d\xe1\xeb\xb2\x7b\x4b\xf9\x54\x51\xd4\x27\xfb\x7d\x1d\xdc\xd9\x06\x09\x8f\xeb\xff\x9c\xb9\x8e\x55\x6f\x2b\x66\x21\x3e\x72\x5f\xe1\x7c\xbf\x69\x55\x38\xbd\xd6\x63\x36\x29\x9f\x18\x8c\xe6\x37\x63\x34\xce\x35\xbf\x62\x34\xff\x01\xfe\x06\x00\x00\xff\xff\x8c\x99\x67\xad\x19\x04\x00\x00")

func dataLoginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataLoginHtml,
		"data/login.html",
	)
}

func dataLoginHtml() (*asset, error) {
	bytes, err := dataLoginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/login.html", size: 1049, mode: os.FileMode(420), modTime: time.Unix(1484596152, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataNewHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\xbb\x6e\xdb\x30\x14\xdd\xf3\x15\xb7\x9c\xeb\xb0\x0e\x52\x0f\x32\x25\xa0\x6d\xda\x2e\x81\xe3\xd8\xe9\xd0\x29\xa0\xa5\x6b\x89\x28\x45\x2a\x24\x55\xdb\x30\xf4\xef\x05\x49\xf9\x55\x38\x80\xbd\x48\xe4\x7d\x9c\x73\xee\x43\x62\x1f\x1e\x9e\xbe\xbd\xfc\x9e\x7e\x87\xca\xd5\x32\xbb\x61\xf1\x05\xc0\xac\xdb\x48\x04\xb7\x69\x30\x25\x0e\xd7\x8e\xe6\xd6\x12\xef\x01\x68\x25\x6c\xc3\x01\x40\x0a\xeb\x06\x21\x34\x01\xa5\x15\x8e\x83\xbd\x0b\x4f\xc9\x17\x78\x88\x2c\x84\x6d\x24\xdf\x24\x20\x94\x14\x0a\x07\x0b\xa9\xf3\x3f\xe3\xde\xb9\x12\x85\xab\x12\xb8\x1b\x7e\x6a\xd6\x3b\x9b\x27\x1d\x70\x29\x4a\x95\x80\x11\x65\xe5\x0e\xd8\x8c\x06\xca\xa0\xb3\x1a\x66\x13\x5c\xc1\x2f\x8b\x86\xd1\x6a\x18\x6c\x4b\x6d\x6a\xa8\xd1\x55\xba\x48\xc9\xf4\x69\xfe\x42\x80\xe7\x4e\x68\x95\x92\xed\xf6\xf6\xe7\xed\xd4\xe8\x1c\xad\xfd\xa1\x4d\xfd\xa8\xf3\xae\xeb\xeb\x62\x42\x35\xad\xeb\x6b\xae\x44\x51\xa0\x22\xa0\x78\x8d\x7d\xda\x44\xab\x1c\x7d\xd2\x84\xd7\xd8\x75\x04\xfe\x72\xd9\x46\xe7\x43\x74\x7a\x23\xcd\xe0\x22\xb4\x19\xbe\xb5\xc2\xa0\x7d\xd4\xa5\x50\x67\x50\x97\x5c\x5a\xbc\x08\xee\xcd\xbc\x5a\xcc\x0d\xba\x53\x45\xcf\xb3\x79\xb0\x5e\x23\xea\x4b\x68\xd3\x19\x35\x0a\x57\xaf\xad\x45\xe3\xa1\x22\x52\x2b\xb3\x7e\x52\x4c\x8a\xdd\xd1\x5f\xc2\xd8\x97\xda\xa4\xc4\x03\x93\xcc\x23\x25\xc0\x68\x70\x1c\x05\x1e\x4b\xf1\xc3\xde\x09\x09\x59\x60\x62\x7b\x0a\xba\x67\xa1\x07\x9a\x77\x19\x1b\x6e\xed\x4a\x9b\x82\x64\xd3\xfe\x74\x0d\xf3\x3e\xfb\x6a\xf6\xec\x79\x06\xb1\xdb\x67\xd8\xea\x12\x2a\xf4\x1b\x9c\x92\xbb\xcf\xa3\x66\x4d\xe2\xbe\xef\x6f\xd6\xe4\x29\x29\xb8\xe3\x89\xa8\x79\x89\xb4\x51\xe5\x78\xc1\x2d\x8e\xee\x3f\xc2\xc9\x24\xbf\x8e\xee\xbb\x8e\xd0\xec\x7f\x31\xbd\x86\x1d\xf5\x49\x7d\xb6\x5d\xd4\xe2\xb0\x19\xf3\x78\x3d\xc6\x60\x34\x8e\x92\x51\xff\xdd\x64\x37\x8c\xc6\x9f\xc0\xbf\x00\x00\x00\xff\xff\xa9\x96\x1d\xef\x1c\x04\x00\x00")

func dataNewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataNewHtml,
		"data/new.html",
	)
}

func dataNewHtml() (*asset, error) {
	bytes, err := dataNewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/new.html", size: 1052, mode: os.FileMode(420), modTime: time.Unix(1484596274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPasswordsHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\x51\x4f\xf3\x36\x14\x7d\xe7\x57\x5c\x02\x12\x9b\x44\x63\x10\xda\x03\xc1\x8d\x54\xd1\x0a\x0d\x31\xa8\x34\xa6\x6d\x4f\xc8\x8d\x4d\x62\x70\x6d\xcb\x76\xd7\x56\x51\xfe\xfb\x64\x3b\x69\x93\x52\xb6\xef\xa5\x8a\xcf\x3d\xe7\xfa\xf8\xfa\xfa\x16\x9f\x4e\x5f\xee\x5f\xff\x9e\xcf\xa0\x72\x4b\x91\x9f\xe0\xd3\xd1\x08\x5e\x5f\xa6\x2f\xc0\x36\x9a\x1b\xe2\xb8\x92\xe0\x14\x68\xa3\x34\x33\x60\xb7\xd2\x91\x0d\x8c\x46\xf9\x09\x8e\x02\x00\x6c\xdd\x56\x30\x70\x5b\xcd\xc6\x89\x63\x1b\x87\x0a\x6b\x13\x1f\x01\xe0\xcb\x12\xea\xf0\x05\x50\xac\x8c\x55\x26\x03\xad\xb8\x74\xcc\xdc\x05\xb8\x09\xbf\x8e\x2c\x04\xdb\x11\x17\xca\x50\x66\x46\x85\x12\x82\x68\xcb\x32\xe8\xbe\x06\x12\x7a\x09\xae\x3a\xd0\x64\x70\xad\x37\x60\x95\xe0\x14\xce\x6e\x6f\x6f\xef\xda\xa8\x26\x94\x72\x59\x66\x70\x95\xfe\x62\xd8\xb2\x83\xbd\xd9\x11\x11\xbc\x94\x19\x08\xf6\xee\xfa\xf9\x57\x62\x97\x5b\x70\xeb\x46\xe1\x90\x19\x48\x25\x07\x36\xce\x34\xb1\x76\xad\x0c\x7d\x2b\x94\x74\x84\x4b\x66\x76\x3a\xca\xad\x16\x64\x9b\x41\xc5\x29\x65\xb2\xdb\x75\xcd\xa9\xab\x32\xb8\xd2\x9b\x0e\xa9\x18\x2f\x2b\xd7\x83\x7c\x6e\x8c\xc2\x96\xa1\xc2\xd5\x75\x3e\x6f\xf7\xb1\x18\x55\xd7\x11\xbc\xc9\x31\x81\xca\xb0\xf7\x71\x52\xd7\xe9\x43\xfa\xcc\xd6\x1d\xeb\x49\x15\x4d\x93\xe4\xcf\x6c\x8d\x11\xc9\x31\xaa\x6e\x8e\x4b\x9e\x54\xa9\x56\xae\x65\xc7\xc5\x40\xb0\x0a\x37\x5c\xd7\xe7\xa5\x50\x0b\x22\x20\x1b\x43\xfa\xd0\x34\x01\x33\x44\x96\x0c\xce\x0b\xe2\x2e\xe1\x5c\xaf\x6d\x08\x4e\xd3\x69\x3c\xf5\x6f\x44\x37\xb1\x44\x58\xf0\xbc\x3d\xa8\x37\x50\xd7\x5e\xd2\x34\x61\x0f\xe8\x02\xa1\x03\x3a\x9a\x5f\x57\x86\x11\x9a\x63\x67\x72\xec\xaa\x7c\xaa\x96\x84\x4b\x8c\x5c\x15\x96\x7f\x58\x66\xe0\x99\x2c\xd9\x0e\x99\x14\xbe\x53\x6d\x5c\x23\xaf\x42\x6d\x8a\x5e\xce\x85\xa2\xdb\xfd\xba\x77\x06\xbd\xb6\xad\xd9\x3d\xd9\xe4\x03\xc0\x43\x34\xaf\xeb\x34\x5a\xf1\xfe\x1d\xfd\x86\xe2\xed\x79\x77\xdf\x93\x0e\x20\x00\xec\x5f\x4a\x21\x88\xb5\xe3\xa4\x50\x7a\x9b\xc0\x17\x0a\x80\x35\x85\xbf\xb7\xf6\x32\xd2\x7b\xa5\xb7\xbf\x2e\xcb\xa6\x49\x40\xc9\x42\xf0\xe2\x33\x6a\xe7\x7f\xfe\x74\x51\xd7\xe9\xab\xfa\x64\xd2\x06\x56\xd3\x5c\xfc\x9c\xa0\x23\xbb\xee\x9b\xa1\x4b\x3a\xa3\xdc\x0d\xba\x68\x9f\xc9\x87\x7c\x9f\x1c\x71\xd6\xb7\xcf\x28\x77\xc9\xa1\x57\xaf\x6d\xbd\x1e\xf3\x81\xc8\x7f\x97\x84\x32\xc1\x1c\xfb\x91\xa2\x4c\x03\xf3\xb0\x2c\x51\x3f\x2c\x4c\x64\x1e\x2f\xcd\xd7\x7b\x0b\x4d\x05\x83\xe6\x61\x92\xf6\xba\x06\xa3\x41\x7f\x61\xd4\x6b\x69\x8c\xe2\x1b\xd8\x6b\x30\x8a\x4f\x0b\x73\xa9\x57\xae\x37\x3c\x13\xe0\x74\x9c\x7c\x9d\x2a\x6d\xdd\xb0\x2d\x0c\xd7\x7d\x01\xfa\x20\xff\x90\x88\xee\xaa\x9e\x4e\xd3\xc7\xdf\xfd\x55\x61\x14\x23\xff\x2f\x8d\x46\x27\x8f\x93\xbf\xde\x66\x73\x18\x43\x9c\x0f\x93\x0f\xb2\x99\x49\x1a\x46\x76\xd3\x24\x71\x2c\xb5\x19\x31\x8a\xff\x00\xff\x06\x00\x00\xff\xff\x6d\x7e\xc7\x97\x43\x06\x00\x00")

func dataPasswordsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataPasswordsHtml,
		"data/passwords.html",
	)
}

func dataPasswordsHtml() (*asset, error) {
	bytes, err := dataPasswordsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/passwords.html", size: 1603, mode: os.FileMode(420), modTime: time.Unix(1484596143, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/edit_password.html": dataEdit_passwordHtml,
	"data/login.html": dataLoginHtml,
	"data/new.html": dataNewHtml,
	"data/passwords.html": dataPasswordsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"edit_password.html": &bintree{dataEdit_passwordHtml, map[string]*bintree{}},
		"login.html": &bintree{dataLoginHtml, map[string]*bintree{}},
		"new.html": &bintree{dataNewHtml, map[string]*bintree{}},
		"passwords.html": &bintree{dataPasswordsHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

