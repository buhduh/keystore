// Code generated by go-bindata.
// sources:
// data/login.html
// data/new.html
// data/new_password.html
// data/passwords.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataLoginHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x81\x50\x0a\x0a\x36\x19\x86\x76\x3e\xf9\xe9\x99\x79\x36\xfa\x19\x86\x10\x01\x63\x3b\x9b\x44\x85\x8c\xa2\xd4\x34\x5b\xa5\xea\x6a\x3d\x77\x3d\xbf\xd4\xf2\xd0\xe2\xd4\x22\x9f\xfc\xe4\xda\x5a\x25\x3b\xbf\xd4\x72\x1b\xfd\x44\x3b\x1b\xfd\x0c\x63\xec\xca\x03\x12\x8b\x8b\xcb\xf3\x8b\x52\x8a\xa1\x1a\x82\x4b\x93\x72\x33\x4b\x10\x7a\x6c\xf4\x21\x76\x03\x02\x00\x00\xff\xff\xbd\x31\xa5\x6c\x93\x00\x00\x00")

func dataLoginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataLoginHtml,
		"data/login.html",
	)
}

func dataLoginHtml() (*asset, error) {
	bytes, err := dataLoginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/login.html", size: 147, mode: os.FileMode(420), modTime: time.Unix(1480799578, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataNewHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\xcb\x6e\xdb\x3a\x10\xdd\xe7\x2b\xe6\x72\x7d\x1d\xb6\x41\xea\x85\x4c\x09\x68\x9b\xb4\x9b\x20\x71\xec\x6c\xba\x0a\x68\x69\x2c\x11\xe5\x43\x21\xa9\xda\x86\xa1\x7f\x2f\x48\xca\xaf\xc2\x45\xe3\x8d\xcd\x79\x9d\x73\x86\x33\x14\xfb\xef\xee\xe9\xeb\xcb\x8f\xe9\x3d\x34\x5e\xc9\xe2\x8a\xa5\x3f\x00\xe6\xfc\x46\x22\xf8\x4d\x8b\x39\xf1\xb8\xf6\xb4\x74\x8e\x84\x08\x40\x27\x61\x1b\x0f\x00\x52\x38\x3f\x8a\xa9\x19\x68\xa3\x71\x12\xfd\x7d\xfc\x95\x7c\x81\x87\xcc\x4a\xb8\x56\xf2\x4d\x06\x42\x4b\xa1\x71\xb4\x90\xa6\xfc\x39\x19\x82\x2b\x51\xf9\x26\x83\x9b\x8f\x1f\xda\xf5\xce\x17\x48\x47\x5c\x8a\x5a\x67\x60\x45\xdd\xf8\x03\x36\xa3\x91\x32\xea\x5c\x1a\xab\x40\xa1\x6f\x4c\x95\x93\xe9\xd3\xfc\x85\x00\x2f\xbd\x30\x3a\x27\xdb\xed\xf5\xf7\xeb\xa9\x35\x25\x3a\xf7\xcd\x58\xf5\x60\xca\xbe\x1f\x7a\x60\x42\xb7\x9d\x1f\xfa\x6b\x44\x55\xa1\x26\xa0\xb9\xc2\xa1\xec\xd1\xe8\x12\x43\xd1\x23\x57\xd8\xf7\x04\x7e\x71\xd9\xa5\xe0\x5d\x0a\x06\x27\x2d\xe0\x5d\x68\x33\x7c\xeb\x84\x45\xf7\x60\x6a\xa1\xcf\xa0\x2e\xb9\x74\xf8\x2e\xb8\x37\xfb\xea\xb0\xb4\xe8\x4f\x15\x3d\xcf\xe6\xd1\x7b\x89\xa8\xcf\xf1\x9a\xce\xa8\xd1\xb8\x7a\xed\x1c\xda\x00\xf5\x2f\x24\xb4\xd6\xd8\x53\x2d\xf7\xc1\x95\x84\xa4\xea\x4e\x16\xc3\x4c\x99\x14\xbb\x63\x30\xe2\x82\x2c\x8d\xcd\x49\x00\x23\x45\xd0\x91\x01\xa3\x31\x70\x94\x78\x4c\x1f\xd6\x62\x47\x1e\xab\xc0\xa6\xcb\xad\xe8\x9e\x85\x1e\x68\xfe\xca\xd8\x72\xe7\x56\xc6\x56\xa4\x98\x0e\xa7\x4b\x98\xf7\xd5\x17\xb3\x17\xcf\x33\x48\xb3\x3a\xc3\xa6\x6a\x68\x30\xec\x7a\x4e\x6e\x3e\x8d\xdb\x35\x49\x2f\x63\x6f\x39\x5b\xe6\xa4\xe2\x9e\x67\x42\xf1\x1a\x69\xab\xeb\xc9\x82\x3b\x1c\xdf\xfe\x0f\x27\x7b\xf0\x65\x7c\xdb\xf7\x84\x16\x7f\x8a\x19\x34\xec\xa8\x4f\xfa\x73\xdd\x42\x89\xc3\x5e\xcd\x93\x79\x8c\xc1\x68\x1a\x25\xa3\xe1\xd5\x15\x57\x8c\xa6\xcf\xc5\xef\x00\x00\x00\xff\xff\x33\x69\x33\x2b\x46\x04\x00\x00")

func dataNewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataNewHtml,
		"data/new.html",
	)
}

func dataNewHtml() (*asset, error) {
	bytes, err := dataNewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/new.html", size: 1094, mode: os.FileMode(420), modTime: time.Unix(1480801853, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataNew_passwordHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x81\x50\x0a\x0a\x36\x19\x86\x76\x7e\xa9\xe5\x0a\x01\x89\xc5\xc5\xe5\xf9\x45\x29\x36\xfa\x19\x86\x10\x71\x63\x3b\x9b\x44\x85\x8c\xa2\xd4\x34\x5b\xa5\xea\x6a\x3d\x77\x3d\x98\x8a\x62\x9f\xfc\xe4\xda\x5a\x25\xbb\xe0\xc4\xb2\x54\x1b\xfd\x44\x3b\x1b\xfd\x0c\x63\x3b\x2e\x1b\x7d\x88\x89\x80\x00\x00\x00\xff\xff\xdc\xa4\x2a\x23\x69\x00\x00\x00")

func dataNew_passwordHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataNew_passwordHtml,
		"data/new_password.html",
	)
}

func dataNew_passwordHtml() (*asset, error) {
	bytes, err := dataNew_passwordHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/new_password.html", size: 105, mode: os.FileMode(420), modTime: time.Unix(1480799584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPasswordsHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x81\x50\x0a\x0a\x36\x19\x86\x76\x01\x89\xc5\xc5\xe5\xf9\x45\x29\xc5\x36\xfa\x19\x86\x10\x41\x63\x3b\x9b\x44\x85\x8c\xa2\xd4\x34\x5b\xa5\xea\x6a\x3d\x77\x3d\xbf\xd4\x72\x98\x2a\x9f\xfc\xe4\xda\x5a\x25\x3b\xbf\xd4\x72\x1b\xfd\x44\x3b\x1b\xfd\x0c\x63\x3b\x2e\x1b\x7d\x88\x79\x80\x00\x00\x00\xff\xff\x4f\xf3\xa0\xb8\x67\x00\x00\x00")

func dataPasswordsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataPasswordsHtml,
		"data/passwords.html",
	)
}

func dataPasswordsHtml() (*asset, error) {
	bytes, err := dataPasswordsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/passwords.html", size: 103, mode: os.FileMode(420), modTime: time.Unix(1480799587, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/login.html": dataLoginHtml,
	"data/new.html": dataNewHtml,
	"data/new_password.html": dataNew_passwordHtml,
	"data/passwords.html": dataPasswordsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"login.html": &bintree{dataLoginHtml, map[string]*bintree{}},
		"new.html": &bintree{dataNewHtml, map[string]*bintree{}},
		"new_password.html": &bintree{dataNew_passwordHtml, map[string]*bintree{}},
		"passwords.html": &bintree{dataPasswordsHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

