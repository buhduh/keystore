// Code generated by go-bindata.
// sources:
// data/login.html
// data/new.html
// data/new_password.html
// data/passwords.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataLoginHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x93\xcd\x6e\xdc\x20\x10\xc7\xef\x79\x8a\x29\xf7\x0d\xdd\xe6\xe6\xb0\x48\x55\xd2\xf6\x12\x6d\x56\x4d\x7a\xe8\x91\x35\xe3\x05\x15\x83\x0b\xb8\xce\x6a\xe5\x77\xaf\x00\x7b\x9d\x4a\xa9\x9a\xf4\x82\x87\xf9\xf8\xfd\x67\x3c\x36\x7b\x77\x7b\x7f\xf3\xf8\x7d\xf7\x09\x54\x6c\x0d\xbf\x60\xe5\x01\xc0\x42\x3c\x1a\x84\x78\xec\x70\x43\x22\x3e\x45\x5a\x87\x40\x52\x04\xa0\x37\x70\xca\x06\x80\xd1\x21\xae\x72\x6a\x05\xd6\x59\xbc\xce\xfe\x31\x9f\x46\xec\x71\xc9\x94\x3a\x74\x46\x1c\x2b\xd0\xd6\x68\x8b\xab\xbd\x71\xf5\x8f\xeb\x29\x38\x68\x19\x55\x05\x1f\xd6\xef\xbb\xa7\xd9\x97\x44\x57\xc2\xe8\x83\xad\xc0\xeb\x83\x8a\x0b\x9b\xd1\x2c\x99\xfb\x54\x6b\x7e\xe7\x0e\xda\x32\xaa\xd6\xc5\x71\xc5\x99\x00\xe5\xb1\xd9\x90\xd3\xe9\xf2\xcb\xe5\x16\x87\x6f\x01\xfd\x9d\xab\xc7\x91\xf0\x2d\x0e\x8c\x0a\xce\xa8\xba\xca\xe9\x8d\xf3\x2d\xb4\x18\x95\x93\x1b\xb2\xbb\x7f\x78\x24\x20\xea\xa8\x9d\x9d\xaa\x77\xde\xd5\x18\xc2\x67\xe7\xdb\x89\x90\xdb\x60\xda\x76\x7d\x9c\xde\x8f\xd2\x52\xa2\x25\x60\x45\x8b\xb3\xa8\xb3\x35\xa6\xa2\xad\x68\x71\x1c\x09\xfc\x12\xa6\x2f\xc1\xdb\x12\x4c\x4e\xca\xe1\x55\xb4\xaf\xf8\xb3\xd7\x1e\x43\x9e\xf4\x05\x6a\x23\x4c\xc0\xd7\xe3\x3e\xe6\x01\x5f\xe0\x98\xc4\x4f\x9c\x82\xe9\x0d\x9f\x96\xc1\x8c\x9e\xcd\x74\xc9\x9b\x6d\x9c\xdf\x90\x44\x25\x3c\x61\x2a\x60\x34\x07\x9e\x25\x3e\xef\x23\xed\x73\xee\x22\x57\x81\x2f\x53\x49\x7a\x56\xa1\x8b\xcc\x5f\x15\x3b\x11\xc2\xe0\xbc\x24\x7c\x37\x59\x6f\x51\x3e\x57\xff\xa7\xfa\x8d\x93\x48\x78\x3a\xdf\xa2\x5a\xa7\xaa\x7f\x2b\x16\x21\x3e\x73\xff\xc0\x85\x7e\xdf\xea\x78\xde\xd4\x43\xb9\x52\xbe\x30\x18\x2d\xfb\x62\x34\x7d\xd3\xfc\x82\xd1\xf2\x33\xff\x0e\x00\x00\xff\xff\x40\x24\xa4\x45\xe4\x03\x00\x00")

func dataLoginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataLoginHtml,
		"data/login.html",
	)
}

func dataLoginHtml() (*asset, error) {
	bytes, err := dataLoginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/login.html", size: 996, mode: os.FileMode(420), modTime: time.Unix(1480984338, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataNewHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x53\xc9\x6e\xdb\x30\x10\xbd\xe7\x2b\xa6\x3c\xd7\x61\x1b\xa4\x3e\xc8\x94\x80\xb6\x69\x7b\x09\x12\xc7\xce\xa5\xa7\x80\x96\xc6\x12\x51\x2e\x0a\x49\xd5\x36\x0c\xfd\x7b\x41\x52\xde\x0a\x07\x88\x2f\x12\x39\xcb\x7b\x6f\x16\xb2\x0f\x77\x8f\xdf\x9f\x7f\x4f\x7f\x40\xe3\x95\x2c\xae\x58\xfa\x01\x30\xe7\x37\x12\xc1\x6f\x5a\xcc\x89\xc7\xb5\xa7\xa5\x73\x24\x78\x00\x3a\x09\xdb\x78\x00\x90\xc2\xf9\x51\x0c\xcd\x40\x1b\x8d\x93\x68\xef\xe3\x57\xf2\x05\x1e\x22\x2b\xe1\x5a\xc9\x37\x19\x08\x2d\x85\xc6\xd1\x42\x9a\xf2\xcf\x64\x70\xae\x44\xe5\x9b\x0c\x6e\x3e\x7f\x6a\xd7\x3b\x5b\x20\x1d\x71\x29\x6a\x9d\x81\x15\x75\xe3\x0f\xd8\x8c\x46\xca\xa8\x73\x69\xac\x02\x85\xbe\x31\x55\x4e\xa6\x8f\xf3\x67\x02\xbc\xf4\xc2\xe8\x9c\x6c\xb7\xd7\xbf\xae\xa7\xd6\x94\xe8\xdc\x4f\x63\xd5\xbd\x29\xfb\x7e\xa8\x81\x09\xdd\x76\x7e\xa8\xaf\x11\x55\x85\x9a\x80\xe6\x0a\x87\xb4\x07\xa3\x4b\x0c\x49\x0f\x5c\x61\xdf\x13\xf8\xcb\x65\x97\x9c\x77\xc9\x19\x8c\xb4\x80\x77\xa1\xcd\xf0\xb5\x13\x16\xdd\xbd\xa9\x85\x3e\x83\xba\xe4\xd2\xe1\xbb\xe0\x5e\xed\x8b\xc3\xd2\xa2\x3f\x55\xf4\x34\x9b\x47\xeb\x25\xa2\xbe\xc6\x36\x9d\x51\xa3\x71\xf5\xd2\x39\xb4\x01\x2a\x21\x75\xb2\x18\xa6\xc2\xa4\xd8\x1d\xc3\x25\x8e\x78\x69\x6c\x4e\x02\x30\x29\x02\x52\x06\x8c\x46\xc7\x51\xe0\xb1\x94\x30\xd8\x9d\x90\x98\x05\x36\xb5\xa7\xa2\x7b\x16\x7a\xa0\x79\x93\xb1\xe5\xce\xad\x8c\xad\x48\x31\x1d\x4e\x97\x30\xef\xb3\x2f\x66\x2f\x9e\x66\x90\xba\x7d\x86\x4d\xd5\xd0\x60\xd8\xd6\x9c\xdc\x7c\x19\xb7\x6b\x92\x76\x7b\x7f\x73\xb6\xcc\x49\xc5\x3d\xcf\x84\xe2\x35\xd2\x56\xd7\x93\x05\x77\x38\xbe\xfd\x08\x27\x93\xfc\x36\xbe\xed\x7b\x42\x8b\xff\xc5\x0c\x1a\x76\xd4\x27\xf5\xb9\x6e\xa1\xc4\x61\x33\xe6\xe9\x7a\x8c\xc1\x68\x1a\x25\xa3\xe1\xdd\x14\x57\x8c\xa6\x07\xff\x2f\x00\x00\xff\xff\xe0\x04\xf0\x0a\x08\x04\x00\x00")

func dataNewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataNewHtml,
		"data/new.html",
	)
}

func dataNewHtml() (*asset, error) {
	bytes, err := dataNewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/new.html", size: 1032, mode: os.FileMode(420), modTime: time.Unix(1480982999, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataNew_passwordHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x55\x41\x6f\xe2\x3a\x10\xbe\xf7\x57\x4c\x7d\x4f\x5c\x9e\xf4\x2e\xd4\x58\x7a\x2a\x7d\xef\x52\x01\x7a\x6d\x57\xda\x53\x65\x92\x81\x78\x6b\xec\xac\xed\x14\x50\x94\xff\xbe\xb2\xe3\x34\xb0\xcb\xa1\x5c\xc8\x24\x9e\xf9\xbe\x6f\x3e\x8f\x0d\xbb\x9d\x2f\x1f\x5e\xbe\xaf\x1e\xa1\xf2\x3b\xc5\x6f\xd8\x6d\x96\xbd\x2c\xe7\xcb\xf8\x0a\xe8\x0a\x51\x4b\xbd\xcd\x32\x7e\xc3\xfa\x04\x00\xe6\xfc\x51\x21\xf8\x63\x8d\x33\xe2\xf1\xe0\x69\xe1\x1c\x09\x2b\x00\x8d\x82\x36\x06\x00\x4a\x3a\x9f\xc5\xd4\x29\x68\xa3\xf1\x3e\x7e\xef\xe2\xaf\x12\x6b\x1c\x33\x4b\xe9\x6a\x25\x8e\x53\x90\x5a\x49\x8d\xd9\x5a\x99\xe2\xfd\x3e\x2d\xee\x65\xe9\xab\x29\xfc\x35\xb9\xab\x0f\xc3\xb7\x40\x9a\x09\x25\xb7\x7a\x0a\x56\x6e\x2b\x3f\x62\x33\x1a\x29\xa3\xce\x6a\xc2\x5f\xeb\x52\x78\xa4\x0b\xdc\xc3\x4a\x38\xb7\x37\xb6\x64\xb4\x9a\xc4\xe5\x8d\xb1\x3b\xd8\xa1\xaf\x4c\x39\x23\xab\xe5\xf3\x0b\x01\x51\x78\x69\xf4\x8c\xb4\x6d\xfe\x5f\xbe\xb2\xa6\x40\xe7\xfe\x35\x76\xf7\x64\x8a\xae\x4b\x2d\x32\xa9\xeb\xc6\xa7\xf6\x2b\x59\x96\xa8\x09\x68\xb1\xc3\x54\xb6\x30\xba\xc0\x50\xb4\x10\x3b\xec\x3a\x02\x1f\x42\x35\xfd\xe2\xbc\x5f\x0c\x1f\x29\x87\x2f\xa1\xfd\x8f\x3f\x1b\x69\xd1\x3d\x99\xad\xd4\x17\x50\xbd\x6d\xf0\xeb\x68\xff\xc4\xfe\x2e\xc0\x68\xdc\xbf\xd5\xc9\xa0\x00\xd7\xa3\x35\x8a\x27\xc7\x99\x92\x43\x18\x5e\xe2\xf6\x6d\x8c\x9d\x91\xc6\xa1\x7d\x0b\x0c\x84\xbf\x3a\xb4\x10\x70\xa7\xc0\x68\x4c\x39\x29\x39\x15\x16\xb6\x6f\x90\x35\xd6\x9f\xf9\x14\xb0\x06\x89\xb6\xb7\xa0\xa4\x9f\x62\xe8\xa8\xe6\x5c\xd8\x30\xbc\xe2\x87\x38\x80\xf3\xcd\x66\x03\xde\x40\xdd\x28\x05\x43\x77\xb0\xaf\x50\x43\x89\x2e\x40\xe6\x79\x1e\x46\xfb\x52\x63\x9f\x6e\xf0\x61\x70\xae\x69\x6b\xf4\xf2\x0a\xf5\x27\xec\xa5\xd9\x09\xa9\x09\x9f\xc7\xe7\x35\xcc\xa9\xf2\xcc\xcd\x1e\xa5\xeb\xc8\x75\x22\xb4\xf1\xe8\x08\x5f\x84\xc7\x25\x09\x81\x56\x58\x14\x89\xb9\x4f\x07\x6b\xf6\x6e\x46\x26\x77\x04\x0a\xa3\xdc\x8c\xfc\x7d\x47\x78\x9a\x7d\x8f\xae\xeb\x18\x1d\xea\xbe\xbe\x9f\xb5\x35\x6b\xb1\x56\x47\xa8\xc4\x07\x86\x2d\xdd\x5b\xe9\x11\x04\x84\xd3\x0d\xb5\x2c\xde\xd1\x82\xb1\xe0\x4c\x38\xcf\xe9\xc2\xba\xd4\x12\x1e\xea\x70\x9a\x08\x7f\x0c\x81\x08\xa7\x01\xe6\xc2\x5f\x35\xb2\x03\xc6\x75\x66\x16\xc2\xe3\xd6\xd8\x23\xe1\x0f\x29\xba\xc4\xe9\x50\x61\xe1\x13\xd1\x58\xf2\x99\x00\xd0\xb6\x56\xe8\x2d\x42\x3e\xcf\x13\x90\x0c\xae\x9e\x64\x00\x30\x53\xc7\xce\xc6\x19\xf8\x16\xa2\x70\x98\xda\x56\x6e\x20\x7f\x8e\x34\x58\x76\x9d\x4b\xd1\x8c\x0c\x11\x69\x5b\xd4\x65\xd7\xf1\x33\xc8\x40\x9c\xc1\x40\x79\x84\xec\x77\x4a\xda\x73\x9e\x4b\x8d\x40\x63\x77\xb4\xe7\xf8\xd3\x37\x46\xfb\xab\x86\xd1\x70\x29\xf3\x1b\x46\xfb\x3f\x9b\x5f\x01\x00\x00\xff\xff\x49\x5e\x9c\xb9\x9e\x06\x00\x00")

func dataNew_passwordHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataNew_passwordHtml,
		"data/new_password.html",
	)
}

func dataNew_passwordHtml() (*asset, error) {
	bytes, err := dataNew_passwordHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/new_password.html", size: 1694, mode: os.FileMode(420), modTime: time.Unix(1481497577, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPasswordsHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x81\x50\x0a\x0a\x36\x19\x86\x76\x01\x89\xc5\xc5\xe5\xf9\x45\x29\xc5\x36\xfa\x19\x86\x10\x41\x63\x3b\x9b\x44\x85\x8c\xa2\xd4\x34\x5b\xa5\xea\x6a\x3d\x77\x3d\xbf\xd4\x72\x98\x2a\x9f\xfc\xe4\xda\x5a\x25\x3b\xbf\xd4\x72\x1b\xfd\x44\x3b\x1b\xfd\x0c\x63\x3b\x2e\x1b\x7d\x88\x79\x80\x00\x00\x00\xff\xff\x4f\xf3\xa0\xb8\x67\x00\x00\x00")

func dataPasswordsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataPasswordsHtml,
		"data/passwords.html",
	)
}

func dataPasswordsHtml() (*asset, error) {
	bytes, err := dataPasswordsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/passwords.html", size: 103, mode: os.FileMode(420), modTime: time.Unix(1480799587, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/login.html": dataLoginHtml,
	"data/new.html": dataNewHtml,
	"data/new_password.html": dataNew_passwordHtml,
	"data/passwords.html": dataPasswordsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"login.html": &bintree{dataLoginHtml, map[string]*bintree{}},
		"new.html": &bintree{dataNewHtml, map[string]*bintree{}},
		"new_password.html": &bintree{dataNew_passwordHtml, map[string]*bintree{}},
		"passwords.html": &bintree{dataPasswordsHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

